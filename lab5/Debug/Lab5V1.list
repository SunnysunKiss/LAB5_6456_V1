
Lab5V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d0  080042d0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d8  080042d8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080042e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000078  08004358  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08004358  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087fa  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000168d  00000000  00000000  000288a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  00029f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002a600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002ac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e57  00000000  00000000  000405bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085dad  00000000  00000000  00049412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf1bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e98  00000000  00000000  000cf210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d9c 	.word	0x08003d9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08003d9c 	.word	0x08003d9c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fdc6 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f832 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8e4 	bl	800076c <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f8c2 	bl	800072c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f896 	bl	80006d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, Rxbuffer, 1); //set DMA receive
 80005ac:	2201      	movs	r2, #1
 80005ae:	490f      	ldr	r1, [pc, #60]	; (80005ec <main+0x58>)
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <main+0x5c>)
 80005b2:	f002 f9f4 	bl	800299e <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(led_status == 1){
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <main+0x60>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d112      	bne.n	80005e4 <main+0x50>
	  static uint32_t timestamp=0;
	  if(timestamp<HAL_GetTick()){
 80005be:	f000 fe19 	bl	80011f4 <HAL_GetTick>
 80005c2:	4602      	mov	r2, r0
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <main+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d90b      	bls.n	80005e4 <main+0x50>
		  timestamp = HAL_GetTick() + (blink);
 80005cc:	f000 fe12 	bl	80011f4 <HAL_GetTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <main+0x68>)
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <main+0x64>)
 80005da:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005dc:	2120      	movs	r1, #32
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <main+0x6c>)
 80005e0:	f001 fc4b 	bl	8001e7a <HAL_GPIO_TogglePin>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, led_status);
	  }}
	  UI();
 80005e4:	f000 f930 	bl	8000848 <UI>
	  if(led_status == 1){
 80005e8:	e7e5      	b.n	80005b6 <main+0x22>
 80005ea:	bf00      	nop
 80005ec:	20000138 	.word	0x20000138
 80005f0:	20000094 	.word	0x20000094
 80005f4:	20000460 	.word	0x20000460
 80005f8:	20000468 	.word	0x20000468
 80005fc:	20000461 	.word	0x20000461
 8000600:	40020000 	.word	0x40020000

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f002 ff4c 	bl	80034b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <SystemClock_Config+0xcc>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xd0>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000678:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067e:	2304      	movs	r3, #4
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000682:	2304      	movs	r3, #4
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fc10 	bl	8001eb0 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000696:	f000 fbf9 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2102      	movs	r1, #2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fe72 	bl	80023a0 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c2:	f000 fbe3 	bl	8000e8c <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_USART2_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000710:	f002 f866 	bl	80027e0 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 fbb7 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000094 	.word	0x20000094
 8000728:	40004400 	.word	0x40004400

0800072c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_DMA_Init+0x3c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <MX_DMA_Init+0x3c>)
 800073c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_DMA_Init+0x3c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2010      	movs	r0, #16
 8000754:	f000 fe35 	bl	80013c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000758:	2010      	movs	r0, #16
 800075a:	f000 fe4e 	bl	80013fa <HAL_NVIC_EnableIRQ>

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2c      	ldr	r2, [pc, #176]	; (800083c <MX_GPIO_Init+0xd0>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a25      	ldr	r2, [pc, #148]	; (800083c <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <MX_GPIO_Init+0xd0>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <MX_GPIO_Init+0xd0>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	4812      	ldr	r0, [pc, #72]	; (8000840 <MX_GPIO_Init+0xd4>)
 80007f8:	f001 fb26 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000802:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_GPIO_Init+0xd8>)
 8000814:	f001 f97c 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000818:	2320      	movs	r3, #32
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_GPIO_Init+0xd4>)
 8000830:	f001 f96e 	bl	8001b10 <HAL_GPIO_Init>

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000
 8000844:	40020800 	.word	0x40020800

08000848 <UI>:

/* USER CODE BEGIN 4 */
void UI()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	switch(state){
 800084c:	4b98      	ldr	r3, [pc, #608]	; (8000ab0 <UI+0x268>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b03      	cmp	r3, #3
 8000852:	f200 8306 	bhi.w	8000e62 <UI+0x61a>
 8000856:	a201      	add	r2, pc, #4	; (adr r2, 800085c <UI+0x14>)
 8000858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085c:	0800086d 	.word	0x0800086d
 8000860:	08000b2f 	.word	0x08000b2f
 8000864:	08000cc7 	.word	0x08000cc7
 8000868:	08000e29 	.word	0x08000e29
		case 0:
			//-----------------------LED Control--------------------------//
			if(led == 0){
 800086c:	4b91      	ldr	r3, [pc, #580]	; (8000ab4 <UI+0x26c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d157      	bne.n	8000924 <UI+0xdc>

				sprintf((char*)Txbuffer,"----------------------------------------------------------------------------\r\n----------------------------------------------------------------------------\r\n----------------------------------------------------------------------------\r\n");
 8000874:	4990      	ldr	r1, [pc, #576]	; (8000ab8 <UI+0x270>)
 8000876:	4891      	ldr	r0, [pc, #580]	; (8000abc <UI+0x274>)
 8000878:	f002 fe22 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 800087c:	488f      	ldr	r0, [pc, #572]	; (8000abc <UI+0x274>)
 800087e:	f7ff fcaf 	bl	80001e0 <strlen>
 8000882:	4603      	mov	r3, r0
 8000884:	b29a      	uxth	r2, r3
 8000886:	4b8e      	ldr	r3, [pc, #568]	; (8000ac0 <UI+0x278>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	498c      	ldr	r1, [pc, #560]	; (8000abc <UI+0x274>)
 800088c:	488d      	ldr	r0, [pc, #564]	; (8000ac4 <UI+0x27c>)
 800088e:	f001 fff4 	bl	800287a <HAL_UART_Transmit>

				sprintf((char*)Txbuffer,"                   This is LED CONTROL mode!!!\r\n");
 8000892:	498d      	ldr	r1, [pc, #564]	; (8000ac8 <UI+0x280>)
 8000894:	4889      	ldr	r0, [pc, #548]	; (8000abc <UI+0x274>)
 8000896:	f002 fe13 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 800089a:	4888      	ldr	r0, [pc, #544]	; (8000abc <UI+0x274>)
 800089c:	f7ff fca0 	bl	80001e0 <strlen>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b86      	ldr	r3, [pc, #536]	; (8000ac0 <UI+0x278>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4984      	ldr	r1, [pc, #528]	; (8000abc <UI+0x274>)
 80008aa:	4886      	ldr	r0, [pc, #536]	; (8000ac4 <UI+0x27c>)
 80008ac:	f001 ffe5 	bl	800287a <HAL_UART_Transmit>

				sprintf((char*)Txbuffer,"please press the options below\r\n");
 80008b0:	4986      	ldr	r1, [pc, #536]	; (8000acc <UI+0x284>)
 80008b2:	4882      	ldr	r0, [pc, #520]	; (8000abc <UI+0x274>)
 80008b4:	f002 fe04 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 80008b8:	4880      	ldr	r0, [pc, #512]	; (8000abc <UI+0x274>)
 80008ba:	f7ff fc91 	bl	80001e0 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b7f      	ldr	r3, [pc, #508]	; (8000ac0 <UI+0x278>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	497d      	ldr	r1, [pc, #500]	; (8000abc <UI+0x274>)
 80008c8:	487e      	ldr	r0, [pc, #504]	; (8000ac4 <UI+0x27c>)
 80008ca:	f001 ffd6 	bl	800287a <HAL_UART_Transmit>

				sprintf((char*)Txbuffer,"A: To increase LED2 Blinking speed\r\nS: To decrease LED2 Blinking speed \r\nD: Turn ON or OFF LED2\r\nX: Go Back to Home page\r\n");
 80008ce:	4980      	ldr	r1, [pc, #512]	; (8000ad0 <UI+0x288>)
 80008d0:	487a      	ldr	r0, [pc, #488]	; (8000abc <UI+0x274>)
 80008d2:	f002 fdf5 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 80008d6:	4879      	ldr	r0, [pc, #484]	; (8000abc <UI+0x274>)
 80008d8:	f7ff fc82 	bl	80001e0 <strlen>
 80008dc:	4603      	mov	r3, r0
 80008de:	b29a      	uxth	r2, r3
 80008e0:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <UI+0x278>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4975      	ldr	r1, [pc, #468]	; (8000abc <UI+0x274>)
 80008e6:	4877      	ldr	r0, [pc, #476]	; (8000ac4 <UI+0x27c>)
 80008e8:	f001 ffc7 	bl	800287a <HAL_UART_Transmit>

				sprintf((char*)Txbuffer,"----------------------------------------------------------------------------\r\n");
 80008ec:	4979      	ldr	r1, [pc, #484]	; (8000ad4 <UI+0x28c>)
 80008ee:	4873      	ldr	r0, [pc, #460]	; (8000abc <UI+0x274>)
 80008f0:	f002 fde6 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 80008f4:	4871      	ldr	r0, [pc, #452]	; (8000abc <UI+0x274>)
 80008f6:	f7ff fc73 	bl	80001e0 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	4b70      	ldr	r3, [pc, #448]	; (8000ac0 <UI+0x278>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	496e      	ldr	r1, [pc, #440]	; (8000abc <UI+0x274>)
 8000904:	486f      	ldr	r0, [pc, #444]	; (8000ac4 <UI+0x27c>)
 8000906:	f001 ffb8 	bl	800287a <HAL_UART_Transmit>

				//-----------update popup page status-------------------//
				welcome = 0;
 800090a:	4b73      	ldr	r3, [pc, #460]	; (8000ad8 <UI+0x290>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
				led = 1;
 8000910:	4b68      	ldr	r3, [pc, #416]	; (8000ab4 <UI+0x26c>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
				button = 0;
 8000916:	4b71      	ldr	r3, [pc, #452]	; (8000adc <UI+0x294>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
				state=0;
 800091c:	4b64      	ldr	r3, [pc, #400]	; (8000ab0 <UI+0x268>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]

				Rxbuffer[0]=0;
				state = 2;
			}
			else{state=0;}
			break; //break case 0
 8000922:	e29d      	b.n	8000e60 <UI+0x618>
			else if(Rxbuffer[0]==97){//+ led speed
 8000924:	4b6e      	ldr	r3, [pc, #440]	; (8000ae0 <UI+0x298>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b61      	cmp	r3, #97	; 0x61
 800092a:	d126      	bne.n	800097a <UI+0x132>
				led_rate = led_rate+1;
 800092c:	4b6d      	ldr	r3, [pc, #436]	; (8000ae4 <UI+0x29c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3301      	adds	r3, #1
 8000932:	4a6c      	ldr	r2, [pc, #432]	; (8000ae4 <UI+0x29c>)
 8000934:	6013      	str	r3, [r2, #0]
				blink = 500/led_rate;
 8000936:	4b6b      	ldr	r3, [pc, #428]	; (8000ae4 <UI+0x29c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800093e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b68      	ldr	r3, [pc, #416]	; (8000ae8 <UI+0x2a0>)
 8000946:	701a      	strb	r2, [r3, #0]
				sprintf((char*)Txbuffer,"LED2's current Blinking speed : %d\r\n",led_rate);
 8000948:	4b66      	ldr	r3, [pc, #408]	; (8000ae4 <UI+0x29c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4967      	ldr	r1, [pc, #412]	; (8000aec <UI+0x2a4>)
 8000950:	485a      	ldr	r0, [pc, #360]	; (8000abc <UI+0x274>)
 8000952:	f002 fdb5 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000956:	4859      	ldr	r0, [pc, #356]	; (8000abc <UI+0x274>)
 8000958:	f7ff fc42 	bl	80001e0 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b57      	ldr	r3, [pc, #348]	; (8000ac0 <UI+0x278>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4955      	ldr	r1, [pc, #340]	; (8000abc <UI+0x274>)
 8000966:	4857      	ldr	r0, [pc, #348]	; (8000ac4 <UI+0x27c>)
 8000968:	f001 ff87 	bl	800287a <HAL_UART_Transmit>
				Rxbuffer[0]=0;
 800096c:	4b5c      	ldr	r3, [pc, #368]	; (8000ae0 <UI+0x298>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
				state=0;
 8000972:	4b4f      	ldr	r3, [pc, #316]	; (8000ab0 <UI+0x268>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
			break; //break case 0
 8000978:	e272      	b.n	8000e60 <UI+0x618>
			else if(Rxbuffer[0]==115){//-led speed
 800097a:	4b59      	ldr	r3, [pc, #356]	; (8000ae0 <UI+0x298>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b73      	cmp	r3, #115	; 0x73
 8000980:	d12d      	bne.n	80009de <UI+0x196>
				led_rate = led_rate-1;
 8000982:	4b58      	ldr	r3, [pc, #352]	; (8000ae4 <UI+0x29c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3b01      	subs	r3, #1
 8000988:	4a56      	ldr	r2, [pc, #344]	; (8000ae4 <UI+0x29c>)
 800098a:	6013      	str	r3, [r2, #0]
				blink = 500/led_rate;
 800098c:	4b55      	ldr	r3, [pc, #340]	; (8000ae4 <UI+0x29c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000994:	fb92 f3f3 	sdiv	r3, r2, r3
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b53      	ldr	r3, [pc, #332]	; (8000ae8 <UI+0x2a0>)
 800099c:	701a      	strb	r2, [r3, #0]
				if(led_rate<=0)led_rate=1;
 800099e:	4b51      	ldr	r3, [pc, #324]	; (8000ae4 <UI+0x29c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	dc02      	bgt.n	80009ac <UI+0x164>
 80009a6:	4b4f      	ldr	r3, [pc, #316]	; (8000ae4 <UI+0x29c>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
				sprintf((char*)Txbuffer,"LED2's current Blinking speed : %d\r\n",led_rate);
 80009ac:	4b4d      	ldr	r3, [pc, #308]	; (8000ae4 <UI+0x29c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	494e      	ldr	r1, [pc, #312]	; (8000aec <UI+0x2a4>)
 80009b4:	4841      	ldr	r0, [pc, #260]	; (8000abc <UI+0x274>)
 80009b6:	f002 fd83 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 80009ba:	4840      	ldr	r0, [pc, #256]	; (8000abc <UI+0x274>)
 80009bc:	f7ff fc10 	bl	80001e0 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <UI+0x278>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	493c      	ldr	r1, [pc, #240]	; (8000abc <UI+0x274>)
 80009ca:	483e      	ldr	r0, [pc, #248]	; (8000ac4 <UI+0x27c>)
 80009cc:	f001 ff55 	bl	800287a <HAL_UART_Transmit>
				Rxbuffer[0]=0;
 80009d0:	4b43      	ldr	r3, [pc, #268]	; (8000ae0 <UI+0x298>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
				state=0;
 80009d6:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <UI+0x268>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
			break; //break case 0
 80009dc:	e240      	b.n	8000e60 <UI+0x618>
			else if(Rxbuffer[0]==100){
 80009de:	4b40      	ldr	r3, [pc, #256]	; (8000ae0 <UI+0x298>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b64      	cmp	r3, #100	; 0x64
 80009e4:	d148      	bne.n	8000a78 <UI+0x230>
				if(led_status == 0){//off to on led
 80009e6:	4b42      	ldr	r3, [pc, #264]	; (8000af0 <UI+0x2a8>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d11f      	bne.n	8000a2e <UI+0x1e6>
					led_status = 1;
 80009ee:	4b40      	ldr	r3, [pc, #256]	; (8000af0 <UI+0x2a8>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, led_status); //fix
 80009f4:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <UI+0x2a8>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2120      	movs	r1, #32
 80009fc:	483d      	ldr	r0, [pc, #244]	; (8000af4 <UI+0x2ac>)
 80009fe:	f001 fa23 	bl	8001e48 <HAL_GPIO_WritePin>
					sprintf((char*)Txbuffer,"LED2's current Status : ON\r\n");
 8000a02:	493d      	ldr	r1, [pc, #244]	; (8000af8 <UI+0x2b0>)
 8000a04:	482d      	ldr	r0, [pc, #180]	; (8000abc <UI+0x274>)
 8000a06:	f002 fd5b 	bl	80034c0 <siprintf>
					HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000a0a:	482c      	ldr	r0, [pc, #176]	; (8000abc <UI+0x274>)
 8000a0c:	f7ff fbe8 	bl	80001e0 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <UI+0x278>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4928      	ldr	r1, [pc, #160]	; (8000abc <UI+0x274>)
 8000a1a:	482a      	ldr	r0, [pc, #168]	; (8000ac4 <UI+0x27c>)
 8000a1c:	f001 ff2d 	bl	800287a <HAL_UART_Transmit>
					Rxbuffer[0]=0;
 8000a20:	4b2f      	ldr	r3, [pc, #188]	; (8000ae0 <UI+0x298>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
					state=0;
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <UI+0x268>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
			break; //break case 0
 8000a2c:	e218      	b.n	8000e60 <UI+0x618>
				else if(led_status == 1){//on to off led
 8000a2e:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <UI+0x2a8>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	f040 8214 	bne.w	8000e60 <UI+0x618>
					led_status = 0;
 8000a38:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <UI+0x2a8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, led_status); //fix
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <UI+0x2a8>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	2120      	movs	r1, #32
 8000a46:	482b      	ldr	r0, [pc, #172]	; (8000af4 <UI+0x2ac>)
 8000a48:	f001 f9fe 	bl	8001e48 <HAL_GPIO_WritePin>
					sprintf((char*)Txbuffer,"LED2's current Status : OFF\r\n");
 8000a4c:	492b      	ldr	r1, [pc, #172]	; (8000afc <UI+0x2b4>)
 8000a4e:	481b      	ldr	r0, [pc, #108]	; (8000abc <UI+0x274>)
 8000a50:	f002 fd36 	bl	80034c0 <siprintf>
					HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000a54:	4819      	ldr	r0, [pc, #100]	; (8000abc <UI+0x274>)
 8000a56:	f7ff fbc3 	bl	80001e0 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <UI+0x278>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4916      	ldr	r1, [pc, #88]	; (8000abc <UI+0x274>)
 8000a64:	4817      	ldr	r0, [pc, #92]	; (8000ac4 <UI+0x27c>)
 8000a66:	f001 ff08 	bl	800287a <HAL_UART_Transmit>
					Rxbuffer[0]=0;
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <UI+0x298>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
					state=0;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <UI+0x268>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
			break; //break case 0
 8000a76:	e1f3      	b.n	8000e60 <UI+0x618>
			else if(Rxbuffer[0]!=120&&Rxbuffer[0]!=100&&Rxbuffer[0]!=115&&Rxbuffer[0]!=97&&Rxbuffer[0]!=0){//error press
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <UI+0x298>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b78      	cmp	r3, #120	; 0x78
 8000a7e:	d03f      	beq.n	8000b00 <UI+0x2b8>
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <UI+0x298>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b64      	cmp	r3, #100	; 0x64
 8000a86:	d03b      	beq.n	8000b00 <UI+0x2b8>
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <UI+0x298>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b73      	cmp	r3, #115	; 0x73
 8000a8e:	d037      	beq.n	8000b00 <UI+0x2b8>
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <UI+0x298>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b61      	cmp	r3, #97	; 0x61
 8000a96:	d033      	beq.n	8000b00 <UI+0x2b8>
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <UI+0x298>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d02f      	beq.n	8000b00 <UI+0x2b8>
				state =3;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <UI+0x268>)
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	701a      	strb	r2, [r3, #0]
				Rxbuffer[0]=0;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <UI+0x298>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
			break; //break case 0
 8000aac:	e1d8      	b.n	8000e60 <UI+0x618>
 8000aae:	bf00      	nop
 8000ab0:	20000004 	.word	0x20000004
 8000ab4:	20000464 	.word	0x20000464
 8000ab8:	08003db4 	.word	0x08003db4
 8000abc:	20000140 	.word	0x20000140
 8000ac0:	20000005 	.word	0x20000005
 8000ac4:	20000094 	.word	0x20000094
 8000ac8:	08003ea0 	.word	0x08003ea0
 8000acc:	08003ed4 	.word	0x08003ed4
 8000ad0:	08003ef8 	.word	0x08003ef8
 8000ad4:	08003f74 	.word	0x08003f74
 8000ad8:	20000463 	.word	0x20000463
 8000adc:	20000465 	.word	0x20000465
 8000ae0:	20000138 	.word	0x20000138
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000461 	.word	0x20000461
 8000aec:	08003fc4 	.word	0x08003fc4
 8000af0:	20000460 	.word	0x20000460
 8000af4:	40020000 	.word	0x40020000
 8000af8:	08003fec 	.word	0x08003fec
 8000afc:	0800400c 	.word	0x0800400c
			else if(Rxbuffer[0]==120){//back to home
 8000b00:	4ba3      	ldr	r3, [pc, #652]	; (8000d90 <UI+0x548>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b78      	cmp	r3, #120	; 0x78
 8000b06:	d10e      	bne.n	8000b26 <UI+0x2de>
				sprintf((char*)text,"                   END LED CONTROL mode\r\n");
 8000b08:	49a2      	ldr	r1, [pc, #648]	; (8000d94 <UI+0x54c>)
 8000b0a:	48a3      	ldr	r0, [pc, #652]	; (8000d98 <UI+0x550>)
 8000b0c:	f002 fcd8 	bl	80034c0 <siprintf>
				sprintf((char*)text,"----------------------------------------------------------------------------\r\n                                                                           \r\n                                                                           \r\n");
 8000b10:	49a2      	ldr	r1, [pc, #648]	; (8000d9c <UI+0x554>)
 8000b12:	48a1      	ldr	r0, [pc, #644]	; (8000d98 <UI+0x550>)
 8000b14:	f002 fcd4 	bl	80034c0 <siprintf>
				Rxbuffer[0]=0;
 8000b18:	4b9d      	ldr	r3, [pc, #628]	; (8000d90 <UI+0x548>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
				state = 2;
 8000b1e:	4ba0      	ldr	r3, [pc, #640]	; (8000da0 <UI+0x558>)
 8000b20:	2202      	movs	r2, #2
 8000b22:	701a      	strb	r2, [r3, #0]
			break; //break case 0
 8000b24:	e19c      	b.n	8000e60 <UI+0x618>
			else{state=0;}
 8000b26:	4b9e      	ldr	r3, [pc, #632]	; (8000da0 <UI+0x558>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
			break; //break case 0
 8000b2c:	e198      	b.n	8000e60 <UI+0x618>
		case 1://button status
			if(button == 0){
 8000b2e:	4b9d      	ldr	r3, [pc, #628]	; (8000da4 <UI+0x55c>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d154      	bne.n	8000be0 <UI+0x398>
				//------------------------------------home popup------------------------------------\//

				sprintf((char*)Txbuffer,"----------------------------------------------------------------------------\r\n----------------------------------------------------------------------------\r\n----------------------------------------------------------------------------\r\n");
 8000b36:	499c      	ldr	r1, [pc, #624]	; (8000da8 <UI+0x560>)
 8000b38:	489c      	ldr	r0, [pc, #624]	; (8000dac <UI+0x564>)
 8000b3a:	f002 fcc1 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000b3e:	489b      	ldr	r0, [pc, #620]	; (8000dac <UI+0x564>)
 8000b40:	f7ff fb4e 	bl	80001e0 <strlen>
 8000b44:	4603      	mov	r3, r0
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	4b99      	ldr	r3, [pc, #612]	; (8000db0 <UI+0x568>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4997      	ldr	r1, [pc, #604]	; (8000dac <UI+0x564>)
 8000b4e:	4899      	ldr	r0, [pc, #612]	; (8000db4 <UI+0x56c>)
 8000b50:	f001 fe93 	bl	800287a <HAL_UART_Transmit>

				sprintf((char*)Txbuffer,"                This is BUTTON STATUS mode!!! \r\n");
 8000b54:	4998      	ldr	r1, [pc, #608]	; (8000db8 <UI+0x570>)
 8000b56:	4895      	ldr	r0, [pc, #596]	; (8000dac <UI+0x564>)
 8000b58:	f002 fcb2 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000b5c:	4893      	ldr	r0, [pc, #588]	; (8000dac <UI+0x564>)
 8000b5e:	f7ff fb3f 	bl	80001e0 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	4b92      	ldr	r3, [pc, #584]	; (8000db0 <UI+0x568>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	4990      	ldr	r1, [pc, #576]	; (8000dac <UI+0x564>)
 8000b6c:	4891      	ldr	r0, [pc, #580]	; (8000db4 <UI+0x56c>)
 8000b6e:	f001 fe84 	bl	800287a <HAL_UART_Transmit>

				sprintf((char*)Txbuffer,"please press the options below\r\n");
 8000b72:	4992      	ldr	r1, [pc, #584]	; (8000dbc <UI+0x574>)
 8000b74:	488d      	ldr	r0, [pc, #564]	; (8000dac <UI+0x564>)
 8000b76:	f002 fca3 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000b7a:	488c      	ldr	r0, [pc, #560]	; (8000dac <UI+0x564>)
 8000b7c:	f7ff fb30 	bl	80001e0 <strlen>
 8000b80:	4603      	mov	r3, r0
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	4b8a      	ldr	r3, [pc, #552]	; (8000db0 <UI+0x568>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4988      	ldr	r1, [pc, #544]	; (8000dac <UI+0x564>)
 8000b8a:	488a      	ldr	r0, [pc, #552]	; (8000db4 <UI+0x56c>)
 8000b8c:	f001 fe75 	bl	800287a <HAL_UART_Transmit>

				sprintf((char*)Txbuffer,"B1: To Check Button1's status\r\nX: Go Back to Home page\r\n");
 8000b90:	498b      	ldr	r1, [pc, #556]	; (8000dc0 <UI+0x578>)
 8000b92:	4886      	ldr	r0, [pc, #536]	; (8000dac <UI+0x564>)
 8000b94:	f002 fc94 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000b98:	4884      	ldr	r0, [pc, #528]	; (8000dac <UI+0x564>)
 8000b9a:	f7ff fb21 	bl	80001e0 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	4b83      	ldr	r3, [pc, #524]	; (8000db0 <UI+0x568>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4981      	ldr	r1, [pc, #516]	; (8000dac <UI+0x564>)
 8000ba8:	4882      	ldr	r0, [pc, #520]	; (8000db4 <UI+0x56c>)
 8000baa:	f001 fe66 	bl	800287a <HAL_UART_Transmit>

				sprintf((char*)Txbuffer,"----------------------------------------------------------------------------\r\n----------------------------------------------------------------------------\r\n----------------------------------------------------------------------------\r\n");
 8000bae:	497e      	ldr	r1, [pc, #504]	; (8000da8 <UI+0x560>)
 8000bb0:	487e      	ldr	r0, [pc, #504]	; (8000dac <UI+0x564>)
 8000bb2:	f002 fc85 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000bb6:	487d      	ldr	r0, [pc, #500]	; (8000dac <UI+0x564>)
 8000bb8:	f7ff fb12 	bl	80001e0 <strlen>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b7b      	ldr	r3, [pc, #492]	; (8000db0 <UI+0x568>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4979      	ldr	r1, [pc, #484]	; (8000dac <UI+0x564>)
 8000bc6:	487b      	ldr	r0, [pc, #492]	; (8000db4 <UI+0x56c>)
 8000bc8:	f001 fe57 	bl	800287a <HAL_UART_Transmit>

				//-----------update popup page status-------------------//
				welcome = 0;
 8000bcc:	4b7d      	ldr	r3, [pc, #500]	; (8000dc4 <UI+0x57c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
				led = 0;
 8000bd2:	4b7d      	ldr	r3, [pc, #500]	; (8000dc8 <UI+0x580>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
				button = 1;
 8000bd8:	4b72      	ldr	r3, [pc, #456]	; (8000da4 <UI+0x55c>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e068      	b.n	8000cb2 <UI+0x46a>
				}
			else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1 && B1b == 0){//Un-press
 8000be0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be4:	4879      	ldr	r0, [pc, #484]	; (8000dcc <UI+0x584>)
 8000be6:	f001 f917 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d119      	bne.n	8000c24 <UI+0x3dc>
 8000bf0:	4b77      	ldr	r3, [pc, #476]	; (8000dd0 <UI+0x588>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d115      	bne.n	8000c24 <UI+0x3dc>
				sprintf((char*)Txbuffer,"Un-press\r\n");
 8000bf8:	4976      	ldr	r1, [pc, #472]	; (8000dd4 <UI+0x58c>)
 8000bfa:	486c      	ldr	r0, [pc, #432]	; (8000dac <UI+0x564>)
 8000bfc:	f002 fc60 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000c00:	486a      	ldr	r0, [pc, #424]	; (8000dac <UI+0x564>)
 8000c02:	f7ff faed 	bl	80001e0 <strlen>
 8000c06:	4603      	mov	r3, r0
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	4b69      	ldr	r3, [pc, #420]	; (8000db0 <UI+0x568>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4967      	ldr	r1, [pc, #412]	; (8000dac <UI+0x564>)
 8000c10:	4868      	ldr	r0, [pc, #416]	; (8000db4 <UI+0x56c>)
 8000c12:	f001 fe32 	bl	800287a <HAL_UART_Transmit>
				Rxbuffer[0]=0;
 8000c16:	4b5e      	ldr	r3, [pc, #376]	; (8000d90 <UI+0x548>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
				state=1;
 8000c1c:	4b60      	ldr	r3, [pc, #384]	; (8000da0 <UI+0x558>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e046      	b.n	8000cb2 <UI+0x46a>
			}
			else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 && B1b == 1){//press
 8000c24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c28:	4868      	ldr	r0, [pc, #416]	; (8000dcc <UI+0x584>)
 8000c2a:	f001 f8f5 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d119      	bne.n	8000c68 <UI+0x420>
 8000c34:	4b66      	ldr	r3, [pc, #408]	; (8000dd0 <UI+0x588>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d115      	bne.n	8000c68 <UI+0x420>
				sprintf((char*)Txbuffer,"Press\r\n");
 8000c3c:	4966      	ldr	r1, [pc, #408]	; (8000dd8 <UI+0x590>)
 8000c3e:	485b      	ldr	r0, [pc, #364]	; (8000dac <UI+0x564>)
 8000c40:	f002 fc3e 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000c44:	4859      	ldr	r0, [pc, #356]	; (8000dac <UI+0x564>)
 8000c46:	f7ff facb 	bl	80001e0 <strlen>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	4b58      	ldr	r3, [pc, #352]	; (8000db0 <UI+0x568>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	4956      	ldr	r1, [pc, #344]	; (8000dac <UI+0x564>)
 8000c54:	4857      	ldr	r0, [pc, #348]	; (8000db4 <UI+0x56c>)
 8000c56:	f001 fe10 	bl	800287a <HAL_UART_Transmit>
				Rxbuffer[0]=0;
 8000c5a:	4b4d      	ldr	r3, [pc, #308]	; (8000d90 <UI+0x548>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
				state=1;
 8000c60:	4b4f      	ldr	r3, [pc, #316]	; (8000da0 <UI+0x558>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e024      	b.n	8000cb2 <UI+0x46a>
			}
			else if(Rxbuffer[0]!=120&&Rxbuffer[0]!=0){//error press
 8000c68:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <UI+0x548>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b78      	cmp	r3, #120	; 0x78
 8000c6e:	d00a      	beq.n	8000c86 <UI+0x43e>
 8000c70:	4b47      	ldr	r3, [pc, #284]	; (8000d90 <UI+0x548>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d006      	beq.n	8000c86 <UI+0x43e>
				state =3;
 8000c78:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <UI+0x558>)
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	701a      	strb	r2, [r3, #0]
				Rxbuffer[0]=0;
 8000c7e:	4b44      	ldr	r3, [pc, #272]	; (8000d90 <UI+0x548>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e015      	b.n	8000cb2 <UI+0x46a>
			}
			else if(Rxbuffer[0]==120){//back to home
 8000c86:	4b42      	ldr	r3, [pc, #264]	; (8000d90 <UI+0x548>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b78      	cmp	r3, #120	; 0x78
 8000c8c:	d10e      	bne.n	8000cac <UI+0x464>
				sprintf((char*)text,"                   END LED CONTROL mode\r\n");
 8000c8e:	4941      	ldr	r1, [pc, #260]	; (8000d94 <UI+0x54c>)
 8000c90:	4841      	ldr	r0, [pc, #260]	; (8000d98 <UI+0x550>)
 8000c92:	f002 fc15 	bl	80034c0 <siprintf>
				sprintf((char*)text,"----------------------------------------------------------------------------\r\n                                                                           \r\n                                                                           \r\n");
 8000c96:	4941      	ldr	r1, [pc, #260]	; (8000d9c <UI+0x554>)
 8000c98:	483f      	ldr	r0, [pc, #252]	; (8000d98 <UI+0x550>)
 8000c9a:	f002 fc11 	bl	80034c0 <siprintf>
				Rxbuffer[0]=0;
 8000c9e:	4b3c      	ldr	r3, [pc, #240]	; (8000d90 <UI+0x548>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
				state = 2;
 8000ca4:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <UI+0x558>)
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e002      	b.n	8000cb2 <UI+0x46a>
			}
			else{state=1;}
 8000cac:	4b3c      	ldr	r3, [pc, #240]	; (8000da0 <UI+0x558>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
			B1b = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb6:	4845      	ldr	r0, [pc, #276]	; (8000dcc <UI+0x584>)
 8000cb8:	f001 f8ae 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b43      	ldr	r3, [pc, #268]	; (8000dd0 <UI+0x588>)
 8000cc2:	701a      	strb	r2, [r3, #0]
			break;
 8000cc4:	e0cd      	b.n	8000e62 <UI+0x61a>
		case 2://home
			if(welcome == 0){
 8000cc6:	4b3f      	ldr	r3, [pc, #252]	; (8000dc4 <UI+0x57c>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d154      	bne.n	8000d78 <UI+0x530>
				//------------------------------------home popup------------------------------------\//

				sprintf((char*)Txbuffer,"----------------------------------------------------------------------------\r\n----------------------------------------------------------------------------\r\n----------------------------------------------------------------------------\r\n");
 8000cce:	4936      	ldr	r1, [pc, #216]	; (8000da8 <UI+0x560>)
 8000cd0:	4836      	ldr	r0, [pc, #216]	; (8000dac <UI+0x564>)
 8000cd2:	f002 fbf5 	bl	80034c0 <siprintf>
				HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000cd6:	4835      	ldr	r0, [pc, #212]	; (8000dac <UI+0x564>)
 8000cd8:	f7ff fa82 	bl	80001e0 <strlen>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b33      	ldr	r3, [pc, #204]	; (8000db0 <UI+0x568>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4931      	ldr	r1, [pc, #196]	; (8000dac <UI+0x564>)
 8000ce6:	4833      	ldr	r0, [pc, #204]	; (8000db4 <UI+0x56c>)
 8000ce8:	f001 fdc7 	bl	800287a <HAL_UART_Transmit>

						sprintf((char*)Txbuffer,"                Hello This is Anchisa's LAB5 UART \r\n");
 8000cec:	493b      	ldr	r1, [pc, #236]	; (8000ddc <UI+0x594>)
 8000cee:	482f      	ldr	r0, [pc, #188]	; (8000dac <UI+0x564>)
 8000cf0:	f002 fbe6 	bl	80034c0 <siprintf>
						HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000cf4:	482d      	ldr	r0, [pc, #180]	; (8000dac <UI+0x564>)
 8000cf6:	f7ff fa73 	bl	80001e0 <strlen>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <UI+0x568>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	492a      	ldr	r1, [pc, #168]	; (8000dac <UI+0x564>)
 8000d04:	482b      	ldr	r0, [pc, #172]	; (8000db4 <UI+0x56c>)
 8000d06:	f001 fdb8 	bl	800287a <HAL_UART_Transmit>

						sprintf((char*)Txbuffer,"please press the options below\r\n");
 8000d0a:	492c      	ldr	r1, [pc, #176]	; (8000dbc <UI+0x574>)
 8000d0c:	4827      	ldr	r0, [pc, #156]	; (8000dac <UI+0x564>)
 8000d0e:	f002 fbd7 	bl	80034c0 <siprintf>
						HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000d12:	4826      	ldr	r0, [pc, #152]	; (8000dac <UI+0x564>)
 8000d14:	f7ff fa64 	bl	80001e0 <strlen>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <UI+0x568>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4922      	ldr	r1, [pc, #136]	; (8000dac <UI+0x564>)
 8000d22:	4824      	ldr	r0, [pc, #144]	; (8000db4 <UI+0x56c>)
 8000d24:	f001 fda9 	bl	800287a <HAL_UART_Transmit>

						sprintf((char*)Txbuffer,"0: To LED CONTROL mode\r\n1: To BUTTON STATUS mode\r\n");
 8000d28:	492d      	ldr	r1, [pc, #180]	; (8000de0 <UI+0x598>)
 8000d2a:	4820      	ldr	r0, [pc, #128]	; (8000dac <UI+0x564>)
 8000d2c:	f002 fbc8 	bl	80034c0 <siprintf>
						HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000d30:	481e      	ldr	r0, [pc, #120]	; (8000dac <UI+0x564>)
 8000d32:	f7ff fa55 	bl	80001e0 <strlen>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <UI+0x568>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	491b      	ldr	r1, [pc, #108]	; (8000dac <UI+0x564>)
 8000d40:	481c      	ldr	r0, [pc, #112]	; (8000db4 <UI+0x56c>)
 8000d42:	f001 fd9a 	bl	800287a <HAL_UART_Transmit>

						sprintf((char*)Txbuffer,"----------------------------------------------------------------------------\r\n----------------------------------------------------------------------------\r\n----------------------------------------------------------------------------\r\n");
 8000d46:	4918      	ldr	r1, [pc, #96]	; (8000da8 <UI+0x560>)
 8000d48:	4818      	ldr	r0, [pc, #96]	; (8000dac <UI+0x564>)
 8000d4a:	f002 fbb9 	bl	80034c0 <siprintf>
						HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000d4e:	4817      	ldr	r0, [pc, #92]	; (8000dac <UI+0x564>)
 8000d50:	f7ff fa46 	bl	80001e0 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <UI+0x568>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4913      	ldr	r1, [pc, #76]	; (8000dac <UI+0x564>)
 8000d5e:	4815      	ldr	r0, [pc, #84]	; (8000db4 <UI+0x56c>)
 8000d60:	f001 fd8b 	bl	800287a <HAL_UART_Transmit>

						//-----------update popup page status-------------------//
						welcome = 1;
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <UI+0x57c>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
						led = 0;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <UI+0x580>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
						button = 0;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <UI+0x55c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
				Rxbuffer[0]=0;
			}
			else{state=2;}


			break;
 8000d76:	e074      	b.n	8000e62 <UI+0x61a>
			else if(Rxbuffer[0]==48){
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <UI+0x548>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b30      	cmp	r3, #48	; 0x30
 8000d7e:	d131      	bne.n	8000de4 <UI+0x59c>
				Rxbuffer[0]=0;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <UI+0x548>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
				state=0;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <UI+0x558>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
			break;
 8000d8c:	e069      	b.n	8000e62 <UI+0x61a>
 8000d8e:	bf00      	nop
 8000d90:	20000138 	.word	0x20000138
 8000d94:	0800402c 	.word	0x0800402c
 8000d98:	200002d0 	.word	0x200002d0
 8000d9c:	08004058 	.word	0x08004058
 8000da0:	20000004 	.word	0x20000004
 8000da4:	20000465 	.word	0x20000465
 8000da8:	08003db4 	.word	0x08003db4
 8000dac:	20000140 	.word	0x20000140
 8000db0:	20000005 	.word	0x20000005
 8000db4:	20000094 	.word	0x20000094
 8000db8:	08004144 	.word	0x08004144
 8000dbc:	08003ed4 	.word	0x08003ed4
 8000dc0:	08004178 	.word	0x08004178
 8000dc4:	20000463 	.word	0x20000463
 8000dc8:	20000464 	.word	0x20000464
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	20000462 	.word	0x20000462
 8000dd4:	080041b4 	.word	0x080041b4
 8000dd8:	080041c0 	.word	0x080041c0
 8000ddc:	080041c8 	.word	0x080041c8
 8000de0:	08004200 	.word	0x08004200
			else if(Rxbuffer[0]==49){
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <UI+0x620>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b31      	cmp	r3, #49	; 0x31
 8000dea:	d106      	bne.n	8000dfa <UI+0x5b2>
				Rxbuffer[0]=0;
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <UI+0x620>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
				state=1;
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <UI+0x624>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
			break;
 8000df8:	e033      	b.n	8000e62 <UI+0x61a>
			else if(Rxbuffer[0]!=48&&Rxbuffer[0]!=49&&Rxbuffer[0]!=0){
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <UI+0x620>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b30      	cmp	r3, #48	; 0x30
 8000e00:	d00e      	beq.n	8000e20 <UI+0x5d8>
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <UI+0x620>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b31      	cmp	r3, #49	; 0x31
 8000e08:	d00a      	beq.n	8000e20 <UI+0x5d8>
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <UI+0x620>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d006      	beq.n	8000e20 <UI+0x5d8>
				state =3;
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <UI+0x624>)
 8000e14:	2203      	movs	r2, #3
 8000e16:	701a      	strb	r2, [r3, #0]
				Rxbuffer[0]=0;
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <UI+0x620>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
			break;
 8000e1e:	e020      	b.n	8000e62 <UI+0x61a>
			else{state=2;}
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <UI+0x624>)
 8000e22:	2202      	movs	r2, #2
 8000e24:	701a      	strb	r2, [r3, #0]
			break;
 8000e26:	e01c      	b.n	8000e62 <UI+0x61a>
		case 3://error
			sprintf((char*)Txbuffer,"     Sorry we don't have this option,will take you back to HOMEPAGE \r\n");
 8000e28:	4911      	ldr	r1, [pc, #68]	; (8000e70 <UI+0x628>)
 8000e2a:	4812      	ldr	r0, [pc, #72]	; (8000e74 <UI+0x62c>)
 8000e2c:	f002 fb48 	bl	80034c0 <siprintf>
			HAL_UART_Transmit(&huart2, Txbuffer, strlen((char*)Txbuffer), tm);
 8000e30:	4810      	ldr	r0, [pc, #64]	; (8000e74 <UI+0x62c>)
 8000e32:	f7ff f9d5 	bl	80001e0 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <UI+0x630>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	490d      	ldr	r1, [pc, #52]	; (8000e74 <UI+0x62c>)
 8000e40:	480e      	ldr	r0, [pc, #56]	; (8000e7c <UI+0x634>)
 8000e42:	f001 fd1a 	bl	800287a <HAL_UART_Transmit>
			welcome = 0;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <UI+0x638>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
			led = 0;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <UI+0x63c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
			button = 0;
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <UI+0x640>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
			state = 2;
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <UI+0x624>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	701a      	strb	r2, [r3, #0]
			break;
 8000e5e:	e000      	b.n	8000e62 <UI+0x61a>
			break; //break case 0
 8000e60:	bf00      	nop

		}


}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000138 	.word	0x20000138
 8000e6c:	20000004 	.word	0x20000004
 8000e70:	08004234 	.word	0x08004234
 8000e74:	20000140 	.word	0x20000140
 8000e78:	20000005 	.word	0x20000005
 8000e7c:	20000094 	.word	0x20000094
 8000e80:	20000463 	.word	0x20000463
 8000e84:	20000464 	.word	0x20000464
 8000e88:	20000465 	.word	0x20000465

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <Error_Handler+0x8>
	...

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ed6:	2007      	movs	r0, #7
 8000ed8:	f000 fa68 	bl	80013ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a30      	ldr	r2, [pc, #192]	; (8000fc8 <HAL_UART_MspInit+0xe0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d15a      	bne.n	8000fc0 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_UART_MspInit+0xe4>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a2e      	ldr	r2, [pc, #184]	; (8000fcc <HAL_UART_MspInit+0xe4>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <HAL_UART_MspInit+0xe4>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <HAL_UART_MspInit+0xe4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <HAL_UART_MspInit+0xe4>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <HAL_UART_MspInit+0xe4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f42:	230c      	movs	r3, #12
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f52:	2307      	movs	r3, #7
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <HAL_UART_MspInit+0xe8>)
 8000f5e:	f000 fdd7 	bl	8001b10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_UART_MspInit+0xec>)
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <HAL_UART_MspInit+0xf0>)
 8000f66:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HAL_UART_MspInit+0xec>)
 8000f6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_UART_MspInit+0xec>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_UART_MspInit+0xec>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_UART_MspInit+0xec>)
 8000f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f82:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_UART_MspInit+0xec>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_UART_MspInit+0xec>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_UART_MspInit+0xec>)
 8000f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f96:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_UART_MspInit+0xec>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <HAL_UART_MspInit+0xec>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <HAL_UART_MspInit+0xec>)
 8000fa6:	f000 fa43 	bl	8001430 <HAL_DMA_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000fb0:	f7ff ff6c 	bl	8000e8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_UART_MspInit+0xec>)
 8000fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8000fba:	4a06      	ldr	r2, [pc, #24]	; (8000fd4 <HAL_UART_MspInit+0xec>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	; 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40004400 	.word	0x40004400
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	200000d8 	.word	0x200000d8
 8000fd8:	40026088 	.word	0x40026088

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <MemManage_Handler+0x4>

08000fee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 f8d0 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <DMA1_Stream5_IRQHandler+0x10>)
 8001036:	f000 fb01 	bl	800163c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200000d8 	.word	0x200000d8

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f002 f9f2 	bl	800345c <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20020000 	.word	0x20020000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	2000046c 	.word	0x2000046c
 80010ac:	20000488 	.word	0x20000488

080010b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010da:	490e      	ldr	r1, [pc, #56]	; (8001114 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f0:	4c0b      	ldr	r4, [pc, #44]	; (8001120 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fe:	f7ff ffd7 	bl	80010b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001102:	f002 f9b1 	bl	8003468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001106:	f7ff fa45 	bl	8000594 <main>
  bx  lr    
 800110a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800110c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001118:	080042e0 	.word	0x080042e0
  ldr r2, =_sbss
 800111c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001120:	20000484 	.word	0x20000484

08001124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC_IRQHandler>
	...

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_Init+0x40>)
 8001132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_Init+0x40>)
 800113e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_Init+0x40>)
 800114a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 f92b 	bl	80013ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f808 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115c:	f7ff fe9c 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023c00 	.word	0x40023c00

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x54>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x58>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	fbb3 f3f1 	udiv	r3, r3, r1
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f943 	bl	8001416 <HAL_SYSTICK_Config>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00e      	b.n	80011b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d80a      	bhi.n	80011b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 f90b 	bl	80013c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ac:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_InitTick+0x5c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000010 	.word	0x20000010
 80011c8:	2000000c 	.word	0x2000000c

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000010 	.word	0x20000010
 80011f0:	20000470 	.word	0x20000470

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000470 	.word	0x20000470

0800120c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123e:	4a04      	ldr	r2, [pc, #16]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <__NVIC_GetPriorityGrouping+0x18>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0307 	and.w	r3, r3, #7
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db0b      	blt.n	800129a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	4907      	ldr	r1, [pc, #28]	; (80012a8 <__NVIC_EnableIRQ+0x38>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db0a      	blt.n	80012d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	490c      	ldr	r1, [pc, #48]	; (80012f8 <__NVIC_SetPriority+0x4c>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d4:	e00a      	b.n	80012ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4908      	ldr	r1, [pc, #32]	; (80012fc <__NVIC_SetPriority+0x50>)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	3b04      	subs	r3, #4
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	761a      	strb	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2b04      	cmp	r3, #4
 800131c:	bf28      	it	cs
 800131e:	2304      	movcs	r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	2b06      	cmp	r3, #6
 8001328:	d902      	bls.n	8001330 <NVIC_EncodePriority+0x30>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b03      	subs	r3, #3
 800132e:	e000      	b.n	8001332 <NVIC_EncodePriority+0x32>
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001348:	f04f 31ff 	mov.w	r1, #4294967295
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	4313      	orrs	r3, r2
         );
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001378:	d301      	bcc.n	800137e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137a:	2301      	movs	r3, #1
 800137c:	e00f      	b.n	800139e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <SysTick_Config+0x40>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001386:	210f      	movs	r1, #15
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f7ff ff8e 	bl	80012ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <SysTick_Config+0x40>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <SysTick_Config+0x40>)
 8001398:	2207      	movs	r2, #7
 800139a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	e000e010 	.word	0xe000e010

080013ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff29 	bl	800120c <__NVIC_SetPriorityGrouping>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d4:	f7ff ff3e 	bl	8001254 <__NVIC_GetPriorityGrouping>
 80013d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff ff8e 	bl	8001300 <NVIC_EncodePriority>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff5d 	bl	80012ac <__NVIC_SetPriority>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff31 	bl	8001270 <__NVIC_EnableIRQ>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffa2 	bl	8001368 <SysTick_Config>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff feda 	bl	80011f4 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e099      	b.n	8001580 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146c:	e00f      	b.n	800148e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800146e:	f7ff fec1 	bl	80011f4 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b05      	cmp	r3, #5
 800147a:	d908      	bls.n	800148e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2220      	movs	r2, #32
 8001480:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2203      	movs	r2, #3
 8001486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e078      	b.n	8001580 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1e8      	bne.n	800146e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	4b38      	ldr	r3, [pc, #224]	; (8001588 <HAL_DMA_Init+0x158>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4313      	orrs	r3, r2
 80014de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d107      	bne.n	80014f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4313      	orrs	r3, r2
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f023 0307 	bic.w	r3, r3, #7
 800150e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4313      	orrs	r3, r2
 8001518:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	2b04      	cmp	r3, #4
 8001520:	d117      	bne.n	8001552 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4313      	orrs	r3, r2
 800152a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00e      	beq.n	8001552 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fa6f 	bl	8001a18 <DMA_CheckFifoParam>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2240      	movs	r2, #64	; 0x40
 8001544:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800154e:	2301      	movs	r3, #1
 8001550:	e016      	b.n	8001580 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 fa26 	bl	80019ac <DMA_CalcBaseAndBitshift>
 8001560:	4603      	mov	r3, r0
 8001562:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	223f      	movs	r2, #63	; 0x3f
 800156a:	409a      	lsls	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	f010803f 	.word	0xf010803f

0800158c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_DMA_Start_IT+0x26>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e040      	b.n	8001634 <HAL_DMA_Start_IT+0xa8>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d12f      	bne.n	8001626 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2202      	movs	r2, #2
 80015ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f000 f9b8 	bl	8001950 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e4:	223f      	movs	r2, #63	; 0x3f
 80015e6:	409a      	lsls	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0216 	orr.w	r2, r2, #22
 80015fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	2b00      	cmp	r3, #0
 8001602:	d007      	beq.n	8001614 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0208 	orr.w	r2, r2, #8
 8001612:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e005      	b.n	8001632 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800162e:	2302      	movs	r3, #2
 8001630:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001632:	7dfb      	ldrb	r3, [r7, #23]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001648:	4b8e      	ldr	r3, [pc, #568]	; (8001884 <HAL_DMA_IRQHandler+0x248>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a8e      	ldr	r2, [pc, #568]	; (8001888 <HAL_DMA_IRQHandler+0x24c>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	0a9b      	lsrs	r3, r3, #10
 8001654:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001666:	2208      	movs	r2, #8
 8001668:	409a      	lsls	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d01a      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d013      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0204 	bic.w	r2, r2, #4
 800168e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001694:	2208      	movs	r2, #8
 8001696:	409a      	lsls	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a0:	f043 0201 	orr.w	r2, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ac:	2201      	movs	r2, #1
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d012      	beq.n	80016de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00b      	beq.n	80016de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ca:	2201      	movs	r2, #1
 80016cc:	409a      	lsls	r2, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	f043 0202 	orr.w	r2, r3, #2
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e2:	2204      	movs	r2, #4
 80016e4:	409a      	lsls	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d012      	beq.n	8001714 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00b      	beq.n	8001714 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001700:	2204      	movs	r2, #4
 8001702:	409a      	lsls	r2, r3
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	f043 0204 	orr.w	r2, r3, #4
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001718:	2210      	movs	r2, #16
 800171a:	409a      	lsls	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d043      	beq.n	80017ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d03c      	beq.n	80017ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001736:	2210      	movs	r2, #16
 8001738:	409a      	lsls	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d018      	beq.n	800177e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d108      	bne.n	800176c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	2b00      	cmp	r3, #0
 8001760:	d024      	beq.n	80017ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	4798      	blx	r3
 800176a:	e01f      	b.n	80017ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001770:	2b00      	cmp	r3, #0
 8001772:	d01b      	beq.n	80017ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	4798      	blx	r3
 800177c:	e016      	b.n	80017ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d107      	bne.n	800179c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0208 	bic.w	r2, r2, #8
 800179a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b0:	2220      	movs	r2, #32
 80017b2:	409a      	lsls	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 808f 	beq.w	80018dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 8087 	beq.w	80018dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	2220      	movs	r2, #32
 80017d4:	409a      	lsls	r2, r3
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d136      	bne.n	8001854 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0216 	bic.w	r2, r2, #22
 80017f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001804:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	2b00      	cmp	r3, #0
 800180c:	d103      	bne.n	8001816 <HAL_DMA_IRQHandler+0x1da>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0208 	bic.w	r2, r2, #8
 8001824:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	223f      	movs	r2, #63	; 0x3f
 800182c:	409a      	lsls	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001846:	2b00      	cmp	r3, #0
 8001848:	d07e      	beq.n	8001948 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	4798      	blx	r3
        }
        return;
 8001852:	e079      	b.n	8001948 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d01d      	beq.n	800189e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10d      	bne.n	800188c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	2b00      	cmp	r3, #0
 8001876:	d031      	beq.n	80018dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	4798      	blx	r3
 8001880:	e02c      	b.n	80018dc <HAL_DMA_IRQHandler+0x2a0>
 8001882:	bf00      	nop
 8001884:	20000008 	.word	0x20000008
 8001888:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001890:	2b00      	cmp	r3, #0
 8001892:	d023      	beq.n	80018dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4798      	blx	r3
 800189c:	e01e      	b.n	80018dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10f      	bne.n	80018cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0210 	bic.w	r2, r2, #16
 80018ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d032      	beq.n	800194a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d022      	beq.n	8001936 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2205      	movs	r2, #5
 80018f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	3301      	adds	r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	d307      	bcc.n	8001924 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f2      	bne.n	8001908 <HAL_DMA_IRQHandler+0x2cc>
 8001922:	e000      	b.n	8001926 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001924:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	4798      	blx	r3
 8001946:	e000      	b.n	800194a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001948:	bf00      	nop
    }
  }
}
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800196c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b40      	cmp	r3, #64	; 0x40
 800197c:	d108      	bne.n	8001990 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800198e:	e007      	b.n	80019a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	60da      	str	r2, [r3, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	3b10      	subs	r3, #16
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <DMA_CalcBaseAndBitshift+0x64>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019c6:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <DMA_CalcBaseAndBitshift+0x68>)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d909      	bls.n	80019ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019e2:	f023 0303 	bic.w	r3, r3, #3
 80019e6:	1d1a      	adds	r2, r3, #4
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	659a      	str	r2, [r3, #88]	; 0x58
 80019ec:	e007      	b.n	80019fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019f6:	f023 0303 	bic.w	r3, r3, #3
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	aaaaaaab 	.word	0xaaaaaaab
 8001a14:	08004294 	.word	0x08004294

08001a18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d11f      	bne.n	8001a72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d856      	bhi.n	8001ae6 <DMA_CheckFifoParam+0xce>
 8001a38:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <DMA_CheckFifoParam+0x28>)
 8001a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3e:	bf00      	nop
 8001a40:	08001a51 	.word	0x08001a51
 8001a44:	08001a63 	.word	0x08001a63
 8001a48:	08001a51 	.word	0x08001a51
 8001a4c:	08001ae7 	.word	0x08001ae7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d046      	beq.n	8001aea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a60:	e043      	b.n	8001aea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a6a:	d140      	bne.n	8001aee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a70:	e03d      	b.n	8001aee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a7a:	d121      	bne.n	8001ac0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d837      	bhi.n	8001af2 <DMA_CheckFifoParam+0xda>
 8001a82:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <DMA_CheckFifoParam+0x70>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001a99 	.word	0x08001a99
 8001a8c:	08001a9f 	.word	0x08001a9f
 8001a90:	08001a99 	.word	0x08001a99
 8001a94:	08001ab1 	.word	0x08001ab1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a9c:	e030      	b.n	8001b00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d025      	beq.n	8001af6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aae:	e022      	b.n	8001af6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ab8:	d11f      	bne.n	8001afa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001abe:	e01c      	b.n	8001afa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d903      	bls.n	8001ace <DMA_CheckFifoParam+0xb6>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d003      	beq.n	8001ad4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001acc:	e018      	b.n	8001b00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad2:	e015      	b.n	8001b00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00e      	beq.n	8001afe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ae4:	e00b      	b.n	8001afe <DMA_CheckFifoParam+0xe6>
      break;
 8001ae6:	bf00      	nop
 8001ae8:	e00a      	b.n	8001b00 <DMA_CheckFifoParam+0xe8>
      break;
 8001aea:	bf00      	nop
 8001aec:	e008      	b.n	8001b00 <DMA_CheckFifoParam+0xe8>
      break;
 8001aee:	bf00      	nop
 8001af0:	e006      	b.n	8001b00 <DMA_CheckFifoParam+0xe8>
      break;
 8001af2:	bf00      	nop
 8001af4:	e004      	b.n	8001b00 <DMA_CheckFifoParam+0xe8>
      break;
 8001af6:	bf00      	nop
 8001af8:	e002      	b.n	8001b00 <DMA_CheckFifoParam+0xe8>
      break;   
 8001afa:	bf00      	nop
 8001afc:	e000      	b.n	8001b00 <DMA_CheckFifoParam+0xe8>
      break;
 8001afe:	bf00      	nop
    }
  } 
  
  return status; 
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop

08001b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	e159      	b.n	8001de0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	f040 8148 	bne.w	8001dda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d005      	beq.n	8001b62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d130      	bne.n	8001bc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b98:	2201      	movs	r2, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 0201 	and.w	r2, r3, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d017      	beq.n	8001c00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d123      	bne.n	8001c54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	08da      	lsrs	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3208      	adds	r2, #8
 8001c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	08da      	lsrs	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3208      	adds	r2, #8
 8001c4e:	69b9      	ldr	r1, [r7, #24]
 8001c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0203 	and.w	r2, r3, #3
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a2 	beq.w	8001dda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <HAL_GPIO_Init+0x2e8>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	4a56      	ldr	r2, [pc, #344]	; (8001df8 <HAL_GPIO_Init+0x2e8>)
 8001ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca6:	4b54      	ldr	r3, [pc, #336]	; (8001df8 <HAL_GPIO_Init+0x2e8>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb2:	4a52      	ldr	r2, [pc, #328]	; (8001dfc <HAL_GPIO_Init+0x2ec>)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	220f      	movs	r2, #15
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a49      	ldr	r2, [pc, #292]	; (8001e00 <HAL_GPIO_Init+0x2f0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d019      	beq.n	8001d12 <HAL_GPIO_Init+0x202>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a48      	ldr	r2, [pc, #288]	; (8001e04 <HAL_GPIO_Init+0x2f4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d013      	beq.n	8001d0e <HAL_GPIO_Init+0x1fe>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a47      	ldr	r2, [pc, #284]	; (8001e08 <HAL_GPIO_Init+0x2f8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00d      	beq.n	8001d0a <HAL_GPIO_Init+0x1fa>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a46      	ldr	r2, [pc, #280]	; (8001e0c <HAL_GPIO_Init+0x2fc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <HAL_GPIO_Init+0x1f6>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a45      	ldr	r2, [pc, #276]	; (8001e10 <HAL_GPIO_Init+0x300>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_GPIO_Init+0x1f2>
 8001cfe:	2304      	movs	r3, #4
 8001d00:	e008      	b.n	8001d14 <HAL_GPIO_Init+0x204>
 8001d02:	2307      	movs	r3, #7
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x204>
 8001d06:	2303      	movs	r3, #3
 8001d08:	e004      	b.n	8001d14 <HAL_GPIO_Init+0x204>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e002      	b.n	8001d14 <HAL_GPIO_Init+0x204>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_GPIO_Init+0x204>
 8001d12:	2300      	movs	r3, #0
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	f002 0203 	and.w	r2, r2, #3
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	4093      	lsls	r3, r2
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d24:	4935      	ldr	r1, [pc, #212]	; (8001dfc <HAL_GPIO_Init+0x2ec>)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d32:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <HAL_GPIO_Init+0x304>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d56:	4a2f      	ldr	r2, [pc, #188]	; (8001e14 <HAL_GPIO_Init+0x304>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <HAL_GPIO_Init+0x304>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d80:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <HAL_GPIO_Init+0x304>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d86:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <HAL_GPIO_Init+0x304>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001daa:	4a1a      	ldr	r2, [pc, #104]	; (8001e14 <HAL_GPIO_Init+0x304>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_GPIO_Init+0x304>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd4:	4a0f      	ldr	r2, [pc, #60]	; (8001e14 <HAL_GPIO_Init+0x304>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	f67f aea2 	bls.w	8001b2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40013800 	.word	0x40013800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	787b      	ldrb	r3, [r7, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e64:	e003      	b.n	8001e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	041a      	lsls	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	619a      	str	r2, [r3, #24]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e8c:	887a      	ldrh	r2, [r7, #2]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	041a      	lsls	r2, r3, #16
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	619a      	str	r2, [r3, #24]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e267      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d075      	beq.n	8001fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ece:	4b88      	ldr	r3, [pc, #544]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d00c      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eda:	4b85      	ldr	r3, [pc, #532]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d112      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee6:	4b82      	ldr	r3, [pc, #520]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ef2:	d10b      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	4b7e      	ldr	r3, [pc, #504]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d05b      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x108>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d157      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e242      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f14:	d106      	bne.n	8001f24 <HAL_RCC_OscConfig+0x74>
 8001f16:	4b76      	ldr	r3, [pc, #472]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a75      	ldr	r2, [pc, #468]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e01d      	b.n	8001f60 <HAL_RCC_OscConfig+0xb0>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x98>
 8001f2e:	4b70      	ldr	r3, [pc, #448]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a6f      	ldr	r2, [pc, #444]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b6d      	ldr	r3, [pc, #436]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a6c      	ldr	r2, [pc, #432]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0xb0>
 8001f48:	4b69      	ldr	r3, [pc, #420]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a68      	ldr	r2, [pc, #416]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a65      	ldr	r2, [pc, #404]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff f944 	bl	80011f4 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff f940 	bl	80011f4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e207      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	4b5b      	ldr	r3, [pc, #364]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0xc0>
 8001f8e:	e014      	b.n	8001fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff f930 	bl	80011f4 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff f92c 	bl	80011f4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1f3      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	4b51      	ldr	r3, [pc, #324]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0xe8>
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d063      	beq.n	800208e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d11c      	bne.n	8002018 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fde:	4b44      	ldr	r3, [pc, #272]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d116      	bne.n	8002018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_RCC_OscConfig+0x152>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e1c7      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002002:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4937      	ldr	r1, [pc, #220]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	e03a      	b.n	800208e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d020      	beq.n	8002062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002020:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <HAL_RCC_OscConfig+0x244>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff f8e5 	bl	80011f4 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800202e:	f7ff f8e1 	bl	80011f4 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e1a8      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002040:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4925      	ldr	r1, [pc, #148]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]
 8002060:	e015      	b.n	800208e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002062:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <HAL_RCC_OscConfig+0x244>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7ff f8c4 	bl	80011f4 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002070:	f7ff f8c0 	bl	80011f4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e187      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002082:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d036      	beq.n	8002108 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d016      	beq.n	80020d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_RCC_OscConfig+0x248>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7ff f8a4 	bl	80011f4 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b0:	f7ff f8a0 	bl	80011f4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e167      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_OscConfig+0x240>)
 80020c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x200>
 80020ce:	e01b      	b.n	8002108 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_OscConfig+0x248>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d6:	f7ff f88d 	bl	80011f4 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	e00e      	b.n	80020fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020de:	f7ff f889 	bl	80011f4 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d907      	bls.n	80020fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e150      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
 80020f0:	40023800 	.word	0x40023800
 80020f4:	42470000 	.word	0x42470000
 80020f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fc:	4b88      	ldr	r3, [pc, #544]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 80020fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1ea      	bne.n	80020de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8097 	beq.w	8002244 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211a:	4b81      	ldr	r3, [pc, #516]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10f      	bne.n	8002146 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	4b7d      	ldr	r3, [pc, #500]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a7c      	ldr	r2, [pc, #496]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b7a      	ldr	r3, [pc, #488]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002142:	2301      	movs	r3, #1
 8002144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	4b77      	ldr	r3, [pc, #476]	; (8002324 <HAL_RCC_OscConfig+0x474>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d118      	bne.n	8002184 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002152:	4b74      	ldr	r3, [pc, #464]	; (8002324 <HAL_RCC_OscConfig+0x474>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a73      	ldr	r2, [pc, #460]	; (8002324 <HAL_RCC_OscConfig+0x474>)
 8002158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215e:	f7ff f849 	bl	80011f4 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002166:	f7ff f845 	bl	80011f4 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e10c      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	4b6a      	ldr	r3, [pc, #424]	; (8002324 <HAL_RCC_OscConfig+0x474>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d106      	bne.n	800219a <HAL_RCC_OscConfig+0x2ea>
 800218c:	4b64      	ldr	r3, [pc, #400]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	4a63      	ldr	r2, [pc, #396]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6713      	str	r3, [r2, #112]	; 0x70
 8002198:	e01c      	b.n	80021d4 <HAL_RCC_OscConfig+0x324>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b05      	cmp	r3, #5
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0x30c>
 80021a2:	4b5f      	ldr	r3, [pc, #380]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	4a5e      	ldr	r2, [pc, #376]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	6713      	str	r3, [r2, #112]	; 0x70
 80021ae:	4b5c      	ldr	r3, [pc, #368]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	4a5b      	ldr	r2, [pc, #364]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0x324>
 80021bc:	4b58      	ldr	r3, [pc, #352]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 80021be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c0:	4a57      	ldr	r2, [pc, #348]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	6713      	str	r3, [r2, #112]	; 0x70
 80021c8:	4b55      	ldr	r3, [pc, #340]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	4a54      	ldr	r2, [pc, #336]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 80021ce:	f023 0304 	bic.w	r3, r3, #4
 80021d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d015      	beq.n	8002208 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7ff f80a 	bl	80011f4 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e4:	f7ff f806 	bl	80011f4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e0cb      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fa:	4b49      	ldr	r3, [pc, #292]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0ee      	beq.n	80021e4 <HAL_RCC_OscConfig+0x334>
 8002206:	e014      	b.n	8002232 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002208:	f7fe fff4 	bl	80011f4 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7fe fff0 	bl	80011f4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e0b5      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002226:	4b3e      	ldr	r3, [pc, #248]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1ee      	bne.n	8002210 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002232:	7dfb      	ldrb	r3, [r7, #23]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d105      	bne.n	8002244 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002238:	4b39      	ldr	r3, [pc, #228]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	4a38      	ldr	r2, [pc, #224]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 800223e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002242:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80a1 	beq.w	8002390 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800224e:	4b34      	ldr	r3, [pc, #208]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b08      	cmp	r3, #8
 8002258:	d05c      	beq.n	8002314 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d141      	bne.n	80022e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_RCC_OscConfig+0x478>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe ffc4 	bl	80011f4 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe ffc0 	bl	80011f4 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e087      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	4b27      	ldr	r3, [pc, #156]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	085b      	lsrs	r3, r3, #1
 80022a6:	3b01      	subs	r3, #1
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	061b      	lsls	r3, r3, #24
 80022b2:	491b      	ldr	r1, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_RCC_OscConfig+0x478>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe ff99 	bl	80011f4 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c6:	f7fe ff95 	bl	80011f4 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e05c      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x416>
 80022e4:	e054      	b.n	8002390 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_RCC_OscConfig+0x478>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7fe ff82 	bl	80011f4 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe ff7e 	bl	80011f4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e045      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_OscConfig+0x470>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x444>
 8002312:	e03d      	b.n	8002390 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e038      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
 8002320:	40023800 	.word	0x40023800
 8002324:	40007000 	.word	0x40007000
 8002328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_RCC_OscConfig+0x4ec>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d028      	beq.n	800238c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d121      	bne.n	800238c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d11a      	bne.n	800238c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800235c:	4013      	ands	r3, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002364:	4293      	cmp	r3, r2
 8002366:	d111      	bne.n	800238c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	085b      	lsrs	r3, r3, #1
 8002374:	3b01      	subs	r3, #1
 8002376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d107      	bne.n	800238c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800

080023a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0cc      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	4b68      	ldr	r3, [pc, #416]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d90c      	bls.n	80023dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b65      	ldr	r3, [pc, #404]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b63      	ldr	r3, [pc, #396]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0b8      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4b59      	ldr	r3, [pc, #356]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a58      	ldr	r2, [pc, #352]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800240c:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a52      	ldr	r2, [pc, #328]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b50      	ldr	r3, [pc, #320]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	494d      	ldr	r1, [pc, #308]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d044      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d119      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e07f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d003      	beq.n	800245e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245a:	2b03      	cmp	r3, #3
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245e:	4b3f      	ldr	r3, [pc, #252]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e06f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e067      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247e:	4b37      	ldr	r3, [pc, #220]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f023 0203 	bic.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4934      	ldr	r1, [pc, #208]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002490:	f7fe feb0 	bl	80011f4 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	e00a      	b.n	80024ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe feac 	bl	80011f4 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e04f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 020c 	and.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1eb      	bne.n	8002498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d20c      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b22      	ldr	r3, [pc, #136]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e032      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4916      	ldr	r1, [pc, #88]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	490e      	ldr	r1, [pc, #56]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002526:	f000 f821 	bl	800256c <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	490a      	ldr	r1, [pc, #40]	; (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe fe10 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023c00 	.word	0x40023c00
 800255c:	40023800 	.word	0x40023800
 8002560:	0800427c 	.word	0x0800427c
 8002564:	20000008 	.word	0x20000008
 8002568:	2000000c 	.word	0x2000000c

0800256c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002570:	b094      	sub	sp, #80	; 0x50
 8002572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	647b      	str	r3, [r7, #68]	; 0x44
 8002578:	2300      	movs	r3, #0
 800257a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800257c:	2300      	movs	r3, #0
 800257e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002584:	4b79      	ldr	r3, [pc, #484]	; (800276c <HAL_RCC_GetSysClockFreq+0x200>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d00d      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x40>
 8002590:	2b08      	cmp	r3, #8
 8002592:	f200 80e1 	bhi.w	8002758 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x34>
 800259a:	2b04      	cmp	r3, #4
 800259c:	d003      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800259e:	e0db      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b73      	ldr	r3, [pc, #460]	; (8002770 <HAL_RCC_GetSysClockFreq+0x204>)
 80025a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025a4:	e0db      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025a6:	4b73      	ldr	r3, [pc, #460]	; (8002774 <HAL_RCC_GetSysClockFreq+0x208>)
 80025a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025aa:	e0d8      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ac:	4b6f      	ldr	r3, [pc, #444]	; (800276c <HAL_RCC_GetSysClockFreq+0x200>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b6:	4b6d      	ldr	r3, [pc, #436]	; (800276c <HAL_RCC_GetSysClockFreq+0x200>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d063      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c2:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_RCC_GetSysClockFreq+0x200>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	099b      	lsrs	r3, r3, #6
 80025c8:	2200      	movs	r2, #0
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80025cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
 80025d6:	2300      	movs	r3, #0
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
 80025da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025de:	4622      	mov	r2, r4
 80025e0:	462b      	mov	r3, r5
 80025e2:	f04f 0000 	mov.w	r0, #0
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	0159      	lsls	r1, r3, #5
 80025ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f0:	0150      	lsls	r0, r2, #5
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4621      	mov	r1, r4
 80025f8:	1a51      	subs	r1, r2, r1
 80025fa:	6139      	str	r1, [r7, #16]
 80025fc:	4629      	mov	r1, r5
 80025fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002610:	4659      	mov	r1, fp
 8002612:	018b      	lsls	r3, r1, #6
 8002614:	4651      	mov	r1, sl
 8002616:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800261a:	4651      	mov	r1, sl
 800261c:	018a      	lsls	r2, r1, #6
 800261e:	4651      	mov	r1, sl
 8002620:	ebb2 0801 	subs.w	r8, r2, r1
 8002624:	4659      	mov	r1, fp
 8002626:	eb63 0901 	sbc.w	r9, r3, r1
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800263a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800263e:	4690      	mov	r8, r2
 8002640:	4699      	mov	r9, r3
 8002642:	4623      	mov	r3, r4
 8002644:	eb18 0303 	adds.w	r3, r8, r3
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	462b      	mov	r3, r5
 800264c:	eb49 0303 	adc.w	r3, r9, r3
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800265e:	4629      	mov	r1, r5
 8002660:	024b      	lsls	r3, r1, #9
 8002662:	4621      	mov	r1, r4
 8002664:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002668:	4621      	mov	r1, r4
 800266a:	024a      	lsls	r2, r1, #9
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002672:	2200      	movs	r2, #0
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
 8002676:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002678:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800267c:	f7fd fe08 	bl	8000290 <__aeabi_uldivmod>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4613      	mov	r3, r2
 8002686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002688:	e058      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <HAL_RCC_GetSysClockFreq+0x200>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	099b      	lsrs	r3, r3, #6
 8002690:	2200      	movs	r2, #0
 8002692:	4618      	mov	r0, r3
 8002694:	4611      	mov	r1, r2
 8002696:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800269a:	623b      	str	r3, [r7, #32]
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
 80026a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026a4:	4642      	mov	r2, r8
 80026a6:	464b      	mov	r3, r9
 80026a8:	f04f 0000 	mov.w	r0, #0
 80026ac:	f04f 0100 	mov.w	r1, #0
 80026b0:	0159      	lsls	r1, r3, #5
 80026b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b6:	0150      	lsls	r0, r2, #5
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4641      	mov	r1, r8
 80026be:	ebb2 0a01 	subs.w	sl, r2, r1
 80026c2:	4649      	mov	r1, r9
 80026c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026dc:	ebb2 040a 	subs.w	r4, r2, sl
 80026e0:	eb63 050b 	sbc.w	r5, r3, fp
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	00eb      	lsls	r3, r5, #3
 80026ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026f2:	00e2      	lsls	r2, r4, #3
 80026f4:	4614      	mov	r4, r2
 80026f6:	461d      	mov	r5, r3
 80026f8:	4643      	mov	r3, r8
 80026fa:	18e3      	adds	r3, r4, r3
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	464b      	mov	r3, r9
 8002700:	eb45 0303 	adc.w	r3, r5, r3
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002712:	4629      	mov	r1, r5
 8002714:	028b      	lsls	r3, r1, #10
 8002716:	4621      	mov	r1, r4
 8002718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800271c:	4621      	mov	r1, r4
 800271e:	028a      	lsls	r2, r1, #10
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002726:	2200      	movs	r2, #0
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	61fa      	str	r2, [r7, #28]
 800272c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002730:	f7fd fdae 	bl	8000290 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4613      	mov	r3, r2
 800273a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_GetSysClockFreq+0x200>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	3301      	adds	r3, #1
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800274c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800274e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002756:	e002      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RCC_GetSysClockFreq+0x204>)
 800275a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800275c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002760:	4618      	mov	r0, r3
 8002762:	3750      	adds	r7, #80	; 0x50
 8002764:	46bd      	mov	sp, r7
 8002766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	00f42400 	.word	0x00f42400
 8002774:	007a1200 	.word	0x007a1200

08002778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <HAL_RCC_GetHCLKFreq+0x14>)
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000008 	.word	0x20000008

08002790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002794:	f7ff fff0 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 8002798:	4602      	mov	r2, r0
 800279a:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	0a9b      	lsrs	r3, r3, #10
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	4903      	ldr	r1, [pc, #12]	; (80027b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a6:	5ccb      	ldrb	r3, [r1, r3]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	0800428c 	.word	0x0800428c

080027b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027bc:	f7ff ffdc 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	0b5b      	lsrs	r3, r3, #13
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4903      	ldr	r1, [pc, #12]	; (80027dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40023800 	.word	0x40023800
 80027dc:	0800428c 	.word	0x0800428c

080027e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e03f      	b.n	8002872 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fb6e 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002822:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fba5 	bl	8002f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002838:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002848:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002858:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b08a      	sub	sp, #40	; 0x28
 800287e:	af02      	add	r7, sp, #8
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b20      	cmp	r3, #32
 8002898:	d17c      	bne.n	8002994 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_UART_Transmit+0x2c>
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e075      	b.n	8002996 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_UART_Transmit+0x3e>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e06e      	b.n	8002996 <HAL_UART_Transmit+0x11c>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2221      	movs	r2, #33	; 0x21
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ce:	f7fe fc91 	bl	80011f4 <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	88fa      	ldrh	r2, [r7, #6]
 80028d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	88fa      	ldrh	r2, [r7, #6]
 80028de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e8:	d108      	bne.n	80028fc <HAL_UART_Transmit+0x82>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d104      	bne.n	80028fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e003      	b.n	8002904 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800290c:	e02a      	b.n	8002964 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f992 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e036      	b.n	8002996 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10b      	bne.n	8002946 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800293c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	3302      	adds	r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	e007      	b.n	8002956 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	3301      	adds	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1cf      	bne.n	800290e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	2140      	movs	r1, #64	; 0x40
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f962 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e006      	b.n	8002996 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	4613      	mov	r3, r2
 80029aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d11d      	bne.n	80029f4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_UART_Receive_DMA+0x26>
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e016      	b.n	80029f6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_UART_Receive_DMA+0x38>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e00f      	b.n	80029f6 <HAL_UART_Receive_DMA+0x58>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f998 	bl	8002d20 <UART_Start_Receive_DMA>
 80029f0:	4603      	mov	r3, r0
 80029f2:	e000      	b.n	80029f6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b09c      	sub	sp, #112	; 0x70
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d172      	bne.n	8002b54 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a70:	2200      	movs	r2, #0
 8002a72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a7e:	e853 3f00 	ldrex	r3, [r3]
 8002a82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	330c      	adds	r3, #12
 8002a92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a94:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a96:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a9c:	e841 2300 	strex	r3, r2, [r1]
 8002aa0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e5      	bne.n	8002a74 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3314      	adds	r3, #20
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab2:	e853 3f00 	ldrex	r3, [r3]
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	667b      	str	r3, [r7, #100]	; 0x64
 8002ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3314      	adds	r3, #20
 8002ac6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ac8:	647a      	str	r2, [r7, #68]	; 0x44
 8002aca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002acc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ad0:	e841 2300 	strex	r3, r2, [r1]
 8002ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1e5      	bne.n	8002aa8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3314      	adds	r3, #20
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	e853 3f00 	ldrex	r3, [r3]
 8002aea:	623b      	str	r3, [r7, #32]
   return(result);
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af2:	663b      	str	r3, [r7, #96]	; 0x60
 8002af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3314      	adds	r3, #20
 8002afa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002afc:	633a      	str	r2, [r7, #48]	; 0x30
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b04:	e841 2300 	strex	r3, r2, [r1]
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e5      	bne.n	8002adc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d119      	bne.n	8002b54 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	330c      	adds	r3, #12
 8002b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	e853 3f00 	ldrex	r3, [r3]
 8002b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0310 	bic.w	r3, r3, #16
 8002b36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b40:	61fa      	str	r2, [r7, #28]
 8002b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b44:	69b9      	ldr	r1, [r7, #24]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	e841 2300 	strex	r3, r2, [r1]
 8002b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e5      	bne.n	8002b20 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d106      	bne.n	8002b6a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b60:	4619      	mov	r1, r3
 8002b62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002b64:	f7ff ff69 	bl	8002a3a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b68:	e002      	b.n	8002b70 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002b6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002b6c:	f7ff ff47 	bl	80029fe <HAL_UART_RxCpltCallback>
}
 8002b70:	bf00      	nop
 8002b72:	3770      	adds	r7, #112	; 0x70
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d108      	bne.n	8002ba0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b92:	085b      	lsrs	r3, r3, #1
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	4619      	mov	r1, r3
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f7ff ff4e 	bl	8002a3a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b9e:	e002      	b.n	8002ba6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f7ff ff36 	bl	8002a12 <HAL_UART_RxHalfCpltCallback>
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b80      	cmp	r3, #128	; 0x80
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b21      	cmp	r3, #33	; 0x21
 8002be0:	d108      	bne.n	8002bf4 <UART_DMAError+0x46>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2200      	movs	r2, #0
 8002bec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002bee:	68b8      	ldr	r0, [r7, #8]
 8002bf0:	f000 f934 	bl	8002e5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b22      	cmp	r3, #34	; 0x22
 8002c14:	d108      	bne.n	8002c28 <UART_DMAError+0x7a>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002c22:	68b8      	ldr	r0, [r7, #8]
 8002c24:	f000 f942 	bl	8002eac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f043 0210 	orr.w	r2, r3, #16
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c34:	68b8      	ldr	r0, [r7, #8]
 8002c36:	f7ff fef6 	bl	8002a26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b090      	sub	sp, #64	; 0x40
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c52:	e050      	b.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d04c      	beq.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c62:	f7fe fac7 	bl	80011f4 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d241      	bcs.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	330c      	adds	r3, #12
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	e853 3f00 	ldrex	r3, [r3]
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	330c      	adds	r3, #12
 8002c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c92:	637a      	str	r2, [r7, #52]	; 0x34
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1e5      	bne.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3314      	adds	r3, #20
 8002cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3314      	adds	r3, #20
 8002cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc6:	623a      	str	r2, [r7, #32]
 8002cc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	69f9      	ldr	r1, [r7, #28]
 8002ccc:	6a3a      	ldr	r2, [r7, #32]
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e5      	bne.n	8002ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e00f      	b.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	bf0c      	ite	eq
 8002d06:	2301      	moveq	r3, #1
 8002d08:	2300      	movne	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d09f      	beq.n	8002c54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3740      	adds	r7, #64	; 0x40
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b098      	sub	sp, #96	; 0x60
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2222      	movs	r2, #34	; 0x22
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	4a40      	ldr	r2, [pc, #256]	; (8002e50 <UART_Start_Receive_DMA+0x130>)
 8002d4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	4a3f      	ldr	r2, [pc, #252]	; (8002e54 <UART_Start_Receive_DMA+0x134>)
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	4a3e      	ldr	r2, [pc, #248]	; (8002e58 <UART_Start_Receive_DMA+0x138>)
 8002d5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d64:	2200      	movs	r2, #0
 8002d66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002d68:	f107 0308 	add.w	r3, r7, #8
 8002d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	f7fe fc04 	bl	800158c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d019      	beq.n	8002dde <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dca:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002dcc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002dd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e5      	bne.n	8002daa <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3314      	adds	r3, #20
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	e853 3f00 	ldrex	r3, [r3]
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	657b      	str	r3, [r7, #84]	; 0x54
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3314      	adds	r3, #20
 8002dfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002dfe:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e06:	e841 2300 	strex	r3, r2, [r1]
 8002e0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1e5      	bne.n	8002dde <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3314      	adds	r3, #20
 8002e18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	617b      	str	r3, [r7, #20]
   return(result);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e28:	653b      	str	r3, [r7, #80]	; 0x50
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e32:	627a      	str	r2, [r7, #36]	; 0x24
 8002e34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	6a39      	ldr	r1, [r7, #32]
 8002e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e5      	bne.n	8002e12 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3760      	adds	r7, #96	; 0x60
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	08002a53 	.word	0x08002a53
 8002e54:	08002b79 	.word	0x08002b79
 8002e58:	08002baf 	.word	0x08002baf

08002e5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	e853 3f00 	ldrex	r3, [r3]
 8002e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	330c      	adds	r3, #12
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	61ba      	str	r2, [r7, #24]
 8002e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e88:	6979      	ldr	r1, [r7, #20]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	e841 2300 	strex	r3, r2, [r1]
 8002e90:	613b      	str	r3, [r7, #16]
   return(result);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e5      	bne.n	8002e64 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002ea0:	bf00      	nop
 8002ea2:	3724      	adds	r7, #36	; 0x24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b095      	sub	sp, #84	; 0x54
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebe:	e853 3f00 	ldrex	r3, [r3]
 8002ec2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ed4:	643a      	str	r2, [r7, #64]	; 0x40
 8002ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002eda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002edc:	e841 2300 	strex	r3, r2, [r1]
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e5      	bne.n	8002eb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3314      	adds	r3, #20
 8002eee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3314      	adds	r3, #20
 8002f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f10:	e841 2300 	strex	r3, r2, [r1]
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1e5      	bne.n	8002ee8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d119      	bne.n	8002f58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f023 0310 	bic.w	r3, r3, #16
 8002f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f44:	61ba      	str	r2, [r7, #24]
 8002f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f48:	6979      	ldr	r1, [r7, #20]
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	e841 2300 	strex	r3, r2, [r1]
 8002f50:	613b      	str	r3, [r7, #16]
   return(result);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e5      	bne.n	8002f24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f66:	bf00      	nop
 8002f68:	3754      	adds	r7, #84	; 0x54
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f78:	b0c0      	sub	sp, #256	; 0x100
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f90:	68d9      	ldr	r1, [r3, #12]
 8002f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	ea40 0301 	orr.w	r3, r0, r1
 8002f9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fcc:	f021 010c 	bic.w	r1, r1, #12
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fee:	6999      	ldr	r1, [r3, #24]
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	ea40 0301 	orr.w	r3, r0, r1
 8002ffa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4b8f      	ldr	r3, [pc, #572]	; (8003240 <UART_SetConfig+0x2cc>)
 8003004:	429a      	cmp	r2, r3
 8003006:	d005      	beq.n	8003014 <UART_SetConfig+0xa0>
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b8d      	ldr	r3, [pc, #564]	; (8003244 <UART_SetConfig+0x2d0>)
 8003010:	429a      	cmp	r2, r3
 8003012:	d104      	bne.n	800301e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003014:	f7ff fbd0 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 8003018:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800301c:	e003      	b.n	8003026 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800301e:	f7ff fbb7 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 8003022:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003030:	f040 810c 	bne.w	800324c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003038:	2200      	movs	r2, #0
 800303a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800303e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003042:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003046:	4622      	mov	r2, r4
 8003048:	462b      	mov	r3, r5
 800304a:	1891      	adds	r1, r2, r2
 800304c:	65b9      	str	r1, [r7, #88]	; 0x58
 800304e:	415b      	adcs	r3, r3
 8003050:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003052:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003056:	4621      	mov	r1, r4
 8003058:	eb12 0801 	adds.w	r8, r2, r1
 800305c:	4629      	mov	r1, r5
 800305e:	eb43 0901 	adc.w	r9, r3, r1
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800306e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003076:	4690      	mov	r8, r2
 8003078:	4699      	mov	r9, r3
 800307a:	4623      	mov	r3, r4
 800307c:	eb18 0303 	adds.w	r3, r8, r3
 8003080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003084:	462b      	mov	r3, r5
 8003086:	eb49 0303 	adc.w	r3, r9, r3
 800308a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800308e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800309a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800309e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030a2:	460b      	mov	r3, r1
 80030a4:	18db      	adds	r3, r3, r3
 80030a6:	653b      	str	r3, [r7, #80]	; 0x50
 80030a8:	4613      	mov	r3, r2
 80030aa:	eb42 0303 	adc.w	r3, r2, r3
 80030ae:	657b      	str	r3, [r7, #84]	; 0x54
 80030b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030b8:	f7fd f8ea 	bl	8000290 <__aeabi_uldivmod>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4b61      	ldr	r3, [pc, #388]	; (8003248 <UART_SetConfig+0x2d4>)
 80030c2:	fba3 2302 	umull	r2, r3, r3, r2
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	011c      	lsls	r4, r3, #4
 80030ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030dc:	4642      	mov	r2, r8
 80030de:	464b      	mov	r3, r9
 80030e0:	1891      	adds	r1, r2, r2
 80030e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80030e4:	415b      	adcs	r3, r3
 80030e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030ec:	4641      	mov	r1, r8
 80030ee:	eb12 0a01 	adds.w	sl, r2, r1
 80030f2:	4649      	mov	r1, r9
 80030f4:	eb43 0b01 	adc.w	fp, r3, r1
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003104:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800310c:	4692      	mov	sl, r2
 800310e:	469b      	mov	fp, r3
 8003110:	4643      	mov	r3, r8
 8003112:	eb1a 0303 	adds.w	r3, sl, r3
 8003116:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800311a:	464b      	mov	r3, r9
 800311c:	eb4b 0303 	adc.w	r3, fp, r3
 8003120:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003130:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003134:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003138:	460b      	mov	r3, r1
 800313a:	18db      	adds	r3, r3, r3
 800313c:	643b      	str	r3, [r7, #64]	; 0x40
 800313e:	4613      	mov	r3, r2
 8003140:	eb42 0303 	adc.w	r3, r2, r3
 8003144:	647b      	str	r3, [r7, #68]	; 0x44
 8003146:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800314a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800314e:	f7fd f89f 	bl	8000290 <__aeabi_uldivmod>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4611      	mov	r1, r2
 8003158:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <UART_SetConfig+0x2d4>)
 800315a:	fba3 2301 	umull	r2, r3, r3, r1
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	2264      	movs	r2, #100	; 0x64
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	1acb      	subs	r3, r1, r3
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800316e:	4b36      	ldr	r3, [pc, #216]	; (8003248 <UART_SetConfig+0x2d4>)
 8003170:	fba3 2302 	umull	r2, r3, r3, r2
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800317c:	441c      	add	r4, r3
 800317e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003182:	2200      	movs	r2, #0
 8003184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003188:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800318c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003190:	4642      	mov	r2, r8
 8003192:	464b      	mov	r3, r9
 8003194:	1891      	adds	r1, r2, r2
 8003196:	63b9      	str	r1, [r7, #56]	; 0x38
 8003198:	415b      	adcs	r3, r3
 800319a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800319c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031a0:	4641      	mov	r1, r8
 80031a2:	1851      	adds	r1, r2, r1
 80031a4:	6339      	str	r1, [r7, #48]	; 0x30
 80031a6:	4649      	mov	r1, r9
 80031a8:	414b      	adcs	r3, r1
 80031aa:	637b      	str	r3, [r7, #52]	; 0x34
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031b8:	4659      	mov	r1, fp
 80031ba:	00cb      	lsls	r3, r1, #3
 80031bc:	4651      	mov	r1, sl
 80031be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031c2:	4651      	mov	r1, sl
 80031c4:	00ca      	lsls	r2, r1, #3
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	4642      	mov	r2, r8
 80031ce:	189b      	adds	r3, r3, r2
 80031d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031d4:	464b      	mov	r3, r9
 80031d6:	460a      	mov	r2, r1
 80031d8:	eb42 0303 	adc.w	r3, r2, r3
 80031dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031f4:	460b      	mov	r3, r1
 80031f6:	18db      	adds	r3, r3, r3
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031fa:	4613      	mov	r3, r2
 80031fc:	eb42 0303 	adc.w	r3, r2, r3
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003206:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800320a:	f7fd f841 	bl	8000290 <__aeabi_uldivmod>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <UART_SetConfig+0x2d4>)
 8003214:	fba3 1302 	umull	r1, r3, r3, r2
 8003218:	095b      	lsrs	r3, r3, #5
 800321a:	2164      	movs	r1, #100	; 0x64
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	3332      	adds	r3, #50	; 0x32
 8003226:	4a08      	ldr	r2, [pc, #32]	; (8003248 <UART_SetConfig+0x2d4>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	f003 0207 	and.w	r2, r3, #7
 8003232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4422      	add	r2, r4
 800323a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800323c:	e105      	b.n	800344a <UART_SetConfig+0x4d6>
 800323e:	bf00      	nop
 8003240:	40011000 	.word	0x40011000
 8003244:	40011400 	.word	0x40011400
 8003248:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800324c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003250:	2200      	movs	r2, #0
 8003252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003256:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800325a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800325e:	4642      	mov	r2, r8
 8003260:	464b      	mov	r3, r9
 8003262:	1891      	adds	r1, r2, r2
 8003264:	6239      	str	r1, [r7, #32]
 8003266:	415b      	adcs	r3, r3
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
 800326a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800326e:	4641      	mov	r1, r8
 8003270:	1854      	adds	r4, r2, r1
 8003272:	4649      	mov	r1, r9
 8003274:	eb43 0501 	adc.w	r5, r3, r1
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	00eb      	lsls	r3, r5, #3
 8003282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003286:	00e2      	lsls	r2, r4, #3
 8003288:	4614      	mov	r4, r2
 800328a:	461d      	mov	r5, r3
 800328c:	4643      	mov	r3, r8
 800328e:	18e3      	adds	r3, r4, r3
 8003290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003294:	464b      	mov	r3, r9
 8003296:	eb45 0303 	adc.w	r3, r5, r3
 800329a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032ba:	4629      	mov	r1, r5
 80032bc:	008b      	lsls	r3, r1, #2
 80032be:	4621      	mov	r1, r4
 80032c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c4:	4621      	mov	r1, r4
 80032c6:	008a      	lsls	r2, r1, #2
 80032c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032cc:	f7fc ffe0 	bl	8000290 <__aeabi_uldivmod>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4b60      	ldr	r3, [pc, #384]	; (8003458 <UART_SetConfig+0x4e4>)
 80032d6:	fba3 2302 	umull	r2, r3, r3, r2
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	011c      	lsls	r4, r3, #4
 80032de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032f0:	4642      	mov	r2, r8
 80032f2:	464b      	mov	r3, r9
 80032f4:	1891      	adds	r1, r2, r2
 80032f6:	61b9      	str	r1, [r7, #24]
 80032f8:	415b      	adcs	r3, r3
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003300:	4641      	mov	r1, r8
 8003302:	1851      	adds	r1, r2, r1
 8003304:	6139      	str	r1, [r7, #16]
 8003306:	4649      	mov	r1, r9
 8003308:	414b      	adcs	r3, r1
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003318:	4659      	mov	r1, fp
 800331a:	00cb      	lsls	r3, r1, #3
 800331c:	4651      	mov	r1, sl
 800331e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003322:	4651      	mov	r1, sl
 8003324:	00ca      	lsls	r2, r1, #3
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	4603      	mov	r3, r0
 800332c:	4642      	mov	r2, r8
 800332e:	189b      	adds	r3, r3, r2
 8003330:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003334:	464b      	mov	r3, r9
 8003336:	460a      	mov	r2, r1
 8003338:	eb42 0303 	adc.w	r3, r2, r3
 800333c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	67bb      	str	r3, [r7, #120]	; 0x78
 800334a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003358:	4649      	mov	r1, r9
 800335a:	008b      	lsls	r3, r1, #2
 800335c:	4641      	mov	r1, r8
 800335e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003362:	4641      	mov	r1, r8
 8003364:	008a      	lsls	r2, r1, #2
 8003366:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800336a:	f7fc ff91 	bl	8000290 <__aeabi_uldivmod>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4b39      	ldr	r3, [pc, #228]	; (8003458 <UART_SetConfig+0x4e4>)
 8003374:	fba3 1302 	umull	r1, r3, r3, r2
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	2164      	movs	r1, #100	; 0x64
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	3332      	adds	r3, #50	; 0x32
 8003386:	4a34      	ldr	r2, [pc, #208]	; (8003458 <UART_SetConfig+0x4e4>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003392:	441c      	add	r4, r3
 8003394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003398:	2200      	movs	r2, #0
 800339a:	673b      	str	r3, [r7, #112]	; 0x70
 800339c:	677a      	str	r2, [r7, #116]	; 0x74
 800339e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033a2:	4642      	mov	r2, r8
 80033a4:	464b      	mov	r3, r9
 80033a6:	1891      	adds	r1, r2, r2
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	415b      	adcs	r3, r3
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033b2:	4641      	mov	r1, r8
 80033b4:	1851      	adds	r1, r2, r1
 80033b6:	6039      	str	r1, [r7, #0]
 80033b8:	4649      	mov	r1, r9
 80033ba:	414b      	adcs	r3, r1
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033ca:	4659      	mov	r1, fp
 80033cc:	00cb      	lsls	r3, r1, #3
 80033ce:	4651      	mov	r1, sl
 80033d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033d4:	4651      	mov	r1, sl
 80033d6:	00ca      	lsls	r2, r1, #3
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	4603      	mov	r3, r0
 80033de:	4642      	mov	r2, r8
 80033e0:	189b      	adds	r3, r3, r2
 80033e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80033e4:	464b      	mov	r3, r9
 80033e6:	460a      	mov	r2, r1
 80033e8:	eb42 0303 	adc.w	r3, r2, r3
 80033ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	663b      	str	r3, [r7, #96]	; 0x60
 80033f8:	667a      	str	r2, [r7, #100]	; 0x64
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003406:	4649      	mov	r1, r9
 8003408:	008b      	lsls	r3, r1, #2
 800340a:	4641      	mov	r1, r8
 800340c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003410:	4641      	mov	r1, r8
 8003412:	008a      	lsls	r2, r1, #2
 8003414:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003418:	f7fc ff3a 	bl	8000290 <__aeabi_uldivmod>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <UART_SetConfig+0x4e4>)
 8003422:	fba3 1302 	umull	r1, r3, r3, r2
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	2164      	movs	r1, #100	; 0x64
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	3332      	adds	r3, #50	; 0x32
 8003434:	4a08      	ldr	r2, [pc, #32]	; (8003458 <UART_SetConfig+0x4e4>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	f003 020f 	and.w	r2, r3, #15
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4422      	add	r2, r4
 8003448:	609a      	str	r2, [r3, #8]
}
 800344a:	bf00      	nop
 800344c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003450:	46bd      	mov	sp, r7
 8003452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003456:	bf00      	nop
 8003458:	51eb851f 	.word	0x51eb851f

0800345c <__errno>:
 800345c:	4b01      	ldr	r3, [pc, #4]	; (8003464 <__errno+0x8>)
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000014 	.word	0x20000014

08003468 <__libc_init_array>:
 8003468:	b570      	push	{r4, r5, r6, lr}
 800346a:	4d0d      	ldr	r5, [pc, #52]	; (80034a0 <__libc_init_array+0x38>)
 800346c:	4c0d      	ldr	r4, [pc, #52]	; (80034a4 <__libc_init_array+0x3c>)
 800346e:	1b64      	subs	r4, r4, r5
 8003470:	10a4      	asrs	r4, r4, #2
 8003472:	2600      	movs	r6, #0
 8003474:	42a6      	cmp	r6, r4
 8003476:	d109      	bne.n	800348c <__libc_init_array+0x24>
 8003478:	4d0b      	ldr	r5, [pc, #44]	; (80034a8 <__libc_init_array+0x40>)
 800347a:	4c0c      	ldr	r4, [pc, #48]	; (80034ac <__libc_init_array+0x44>)
 800347c:	f000 fc8e 	bl	8003d9c <_init>
 8003480:	1b64      	subs	r4, r4, r5
 8003482:	10a4      	asrs	r4, r4, #2
 8003484:	2600      	movs	r6, #0
 8003486:	42a6      	cmp	r6, r4
 8003488:	d105      	bne.n	8003496 <__libc_init_array+0x2e>
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003490:	4798      	blx	r3
 8003492:	3601      	adds	r6, #1
 8003494:	e7ee      	b.n	8003474 <__libc_init_array+0xc>
 8003496:	f855 3b04 	ldr.w	r3, [r5], #4
 800349a:	4798      	blx	r3
 800349c:	3601      	adds	r6, #1
 800349e:	e7f2      	b.n	8003486 <__libc_init_array+0x1e>
 80034a0:	080042d8 	.word	0x080042d8
 80034a4:	080042d8 	.word	0x080042d8
 80034a8:	080042d8 	.word	0x080042d8
 80034ac:	080042dc 	.word	0x080042dc

080034b0 <memset>:
 80034b0:	4402      	add	r2, r0
 80034b2:	4603      	mov	r3, r0
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d100      	bne.n	80034ba <memset+0xa>
 80034b8:	4770      	bx	lr
 80034ba:	f803 1b01 	strb.w	r1, [r3], #1
 80034be:	e7f9      	b.n	80034b4 <memset+0x4>

080034c0 <siprintf>:
 80034c0:	b40e      	push	{r1, r2, r3}
 80034c2:	b500      	push	{lr}
 80034c4:	b09c      	sub	sp, #112	; 0x70
 80034c6:	ab1d      	add	r3, sp, #116	; 0x74
 80034c8:	9002      	str	r0, [sp, #8]
 80034ca:	9006      	str	r0, [sp, #24]
 80034cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034d0:	4809      	ldr	r0, [pc, #36]	; (80034f8 <siprintf+0x38>)
 80034d2:	9107      	str	r1, [sp, #28]
 80034d4:	9104      	str	r1, [sp, #16]
 80034d6:	4909      	ldr	r1, [pc, #36]	; (80034fc <siprintf+0x3c>)
 80034d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80034dc:	9105      	str	r1, [sp, #20]
 80034de:	6800      	ldr	r0, [r0, #0]
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	a902      	add	r1, sp, #8
 80034e4:	f000 f868 	bl	80035b8 <_svfiprintf_r>
 80034e8:	9b02      	ldr	r3, [sp, #8]
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	b01c      	add	sp, #112	; 0x70
 80034f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80034f4:	b003      	add	sp, #12
 80034f6:	4770      	bx	lr
 80034f8:	20000014 	.word	0x20000014
 80034fc:	ffff0208 	.word	0xffff0208

08003500 <__ssputs_r>:
 8003500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003504:	688e      	ldr	r6, [r1, #8]
 8003506:	429e      	cmp	r6, r3
 8003508:	4682      	mov	sl, r0
 800350a:	460c      	mov	r4, r1
 800350c:	4690      	mov	r8, r2
 800350e:	461f      	mov	r7, r3
 8003510:	d838      	bhi.n	8003584 <__ssputs_r+0x84>
 8003512:	898a      	ldrh	r2, [r1, #12]
 8003514:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003518:	d032      	beq.n	8003580 <__ssputs_r+0x80>
 800351a:	6825      	ldr	r5, [r4, #0]
 800351c:	6909      	ldr	r1, [r1, #16]
 800351e:	eba5 0901 	sub.w	r9, r5, r1
 8003522:	6965      	ldr	r5, [r4, #20]
 8003524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003528:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800352c:	3301      	adds	r3, #1
 800352e:	444b      	add	r3, r9
 8003530:	106d      	asrs	r5, r5, #1
 8003532:	429d      	cmp	r5, r3
 8003534:	bf38      	it	cc
 8003536:	461d      	movcc	r5, r3
 8003538:	0553      	lsls	r3, r2, #21
 800353a:	d531      	bpl.n	80035a0 <__ssputs_r+0xa0>
 800353c:	4629      	mov	r1, r5
 800353e:	f000 fb63 	bl	8003c08 <_malloc_r>
 8003542:	4606      	mov	r6, r0
 8003544:	b950      	cbnz	r0, 800355c <__ssputs_r+0x5c>
 8003546:	230c      	movs	r3, #12
 8003548:	f8ca 3000 	str.w	r3, [sl]
 800354c:	89a3      	ldrh	r3, [r4, #12]
 800354e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003552:	81a3      	strh	r3, [r4, #12]
 8003554:	f04f 30ff 	mov.w	r0, #4294967295
 8003558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800355c:	6921      	ldr	r1, [r4, #16]
 800355e:	464a      	mov	r2, r9
 8003560:	f000 fabe 	bl	8003ae0 <memcpy>
 8003564:	89a3      	ldrh	r3, [r4, #12]
 8003566:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800356a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356e:	81a3      	strh	r3, [r4, #12]
 8003570:	6126      	str	r6, [r4, #16]
 8003572:	6165      	str	r5, [r4, #20]
 8003574:	444e      	add	r6, r9
 8003576:	eba5 0509 	sub.w	r5, r5, r9
 800357a:	6026      	str	r6, [r4, #0]
 800357c:	60a5      	str	r5, [r4, #8]
 800357e:	463e      	mov	r6, r7
 8003580:	42be      	cmp	r6, r7
 8003582:	d900      	bls.n	8003586 <__ssputs_r+0x86>
 8003584:	463e      	mov	r6, r7
 8003586:	6820      	ldr	r0, [r4, #0]
 8003588:	4632      	mov	r2, r6
 800358a:	4641      	mov	r1, r8
 800358c:	f000 fab6 	bl	8003afc <memmove>
 8003590:	68a3      	ldr	r3, [r4, #8]
 8003592:	1b9b      	subs	r3, r3, r6
 8003594:	60a3      	str	r3, [r4, #8]
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	4433      	add	r3, r6
 800359a:	6023      	str	r3, [r4, #0]
 800359c:	2000      	movs	r0, #0
 800359e:	e7db      	b.n	8003558 <__ssputs_r+0x58>
 80035a0:	462a      	mov	r2, r5
 80035a2:	f000 fba5 	bl	8003cf0 <_realloc_r>
 80035a6:	4606      	mov	r6, r0
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d1e1      	bne.n	8003570 <__ssputs_r+0x70>
 80035ac:	6921      	ldr	r1, [r4, #16]
 80035ae:	4650      	mov	r0, sl
 80035b0:	f000 fabe 	bl	8003b30 <_free_r>
 80035b4:	e7c7      	b.n	8003546 <__ssputs_r+0x46>
	...

080035b8 <_svfiprintf_r>:
 80035b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035bc:	4698      	mov	r8, r3
 80035be:	898b      	ldrh	r3, [r1, #12]
 80035c0:	061b      	lsls	r3, r3, #24
 80035c2:	b09d      	sub	sp, #116	; 0x74
 80035c4:	4607      	mov	r7, r0
 80035c6:	460d      	mov	r5, r1
 80035c8:	4614      	mov	r4, r2
 80035ca:	d50e      	bpl.n	80035ea <_svfiprintf_r+0x32>
 80035cc:	690b      	ldr	r3, [r1, #16]
 80035ce:	b963      	cbnz	r3, 80035ea <_svfiprintf_r+0x32>
 80035d0:	2140      	movs	r1, #64	; 0x40
 80035d2:	f000 fb19 	bl	8003c08 <_malloc_r>
 80035d6:	6028      	str	r0, [r5, #0]
 80035d8:	6128      	str	r0, [r5, #16]
 80035da:	b920      	cbnz	r0, 80035e6 <_svfiprintf_r+0x2e>
 80035dc:	230c      	movs	r3, #12
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	f04f 30ff 	mov.w	r0, #4294967295
 80035e4:	e0d1      	b.n	800378a <_svfiprintf_r+0x1d2>
 80035e6:	2340      	movs	r3, #64	; 0x40
 80035e8:	616b      	str	r3, [r5, #20]
 80035ea:	2300      	movs	r3, #0
 80035ec:	9309      	str	r3, [sp, #36]	; 0x24
 80035ee:	2320      	movs	r3, #32
 80035f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80035f8:	2330      	movs	r3, #48	; 0x30
 80035fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80037a4 <_svfiprintf_r+0x1ec>
 80035fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003602:	f04f 0901 	mov.w	r9, #1
 8003606:	4623      	mov	r3, r4
 8003608:	469a      	mov	sl, r3
 800360a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800360e:	b10a      	cbz	r2, 8003614 <_svfiprintf_r+0x5c>
 8003610:	2a25      	cmp	r2, #37	; 0x25
 8003612:	d1f9      	bne.n	8003608 <_svfiprintf_r+0x50>
 8003614:	ebba 0b04 	subs.w	fp, sl, r4
 8003618:	d00b      	beq.n	8003632 <_svfiprintf_r+0x7a>
 800361a:	465b      	mov	r3, fp
 800361c:	4622      	mov	r2, r4
 800361e:	4629      	mov	r1, r5
 8003620:	4638      	mov	r0, r7
 8003622:	f7ff ff6d 	bl	8003500 <__ssputs_r>
 8003626:	3001      	adds	r0, #1
 8003628:	f000 80aa 	beq.w	8003780 <_svfiprintf_r+0x1c8>
 800362c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800362e:	445a      	add	r2, fp
 8003630:	9209      	str	r2, [sp, #36]	; 0x24
 8003632:	f89a 3000 	ldrb.w	r3, [sl]
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80a2 	beq.w	8003780 <_svfiprintf_r+0x1c8>
 800363c:	2300      	movs	r3, #0
 800363e:	f04f 32ff 	mov.w	r2, #4294967295
 8003642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003646:	f10a 0a01 	add.w	sl, sl, #1
 800364a:	9304      	str	r3, [sp, #16]
 800364c:	9307      	str	r3, [sp, #28]
 800364e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003652:	931a      	str	r3, [sp, #104]	; 0x68
 8003654:	4654      	mov	r4, sl
 8003656:	2205      	movs	r2, #5
 8003658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800365c:	4851      	ldr	r0, [pc, #324]	; (80037a4 <_svfiprintf_r+0x1ec>)
 800365e:	f7fc fdc7 	bl	80001f0 <memchr>
 8003662:	9a04      	ldr	r2, [sp, #16]
 8003664:	b9d8      	cbnz	r0, 800369e <_svfiprintf_r+0xe6>
 8003666:	06d0      	lsls	r0, r2, #27
 8003668:	bf44      	itt	mi
 800366a:	2320      	movmi	r3, #32
 800366c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003670:	0711      	lsls	r1, r2, #28
 8003672:	bf44      	itt	mi
 8003674:	232b      	movmi	r3, #43	; 0x2b
 8003676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800367a:	f89a 3000 	ldrb.w	r3, [sl]
 800367e:	2b2a      	cmp	r3, #42	; 0x2a
 8003680:	d015      	beq.n	80036ae <_svfiprintf_r+0xf6>
 8003682:	9a07      	ldr	r2, [sp, #28]
 8003684:	4654      	mov	r4, sl
 8003686:	2000      	movs	r0, #0
 8003688:	f04f 0c0a 	mov.w	ip, #10
 800368c:	4621      	mov	r1, r4
 800368e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003692:	3b30      	subs	r3, #48	; 0x30
 8003694:	2b09      	cmp	r3, #9
 8003696:	d94e      	bls.n	8003736 <_svfiprintf_r+0x17e>
 8003698:	b1b0      	cbz	r0, 80036c8 <_svfiprintf_r+0x110>
 800369a:	9207      	str	r2, [sp, #28]
 800369c:	e014      	b.n	80036c8 <_svfiprintf_r+0x110>
 800369e:	eba0 0308 	sub.w	r3, r0, r8
 80036a2:	fa09 f303 	lsl.w	r3, r9, r3
 80036a6:	4313      	orrs	r3, r2
 80036a8:	9304      	str	r3, [sp, #16]
 80036aa:	46a2      	mov	sl, r4
 80036ac:	e7d2      	b.n	8003654 <_svfiprintf_r+0x9c>
 80036ae:	9b03      	ldr	r3, [sp, #12]
 80036b0:	1d19      	adds	r1, r3, #4
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	9103      	str	r1, [sp, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	bfbb      	ittet	lt
 80036ba:	425b      	neglt	r3, r3
 80036bc:	f042 0202 	orrlt.w	r2, r2, #2
 80036c0:	9307      	strge	r3, [sp, #28]
 80036c2:	9307      	strlt	r3, [sp, #28]
 80036c4:	bfb8      	it	lt
 80036c6:	9204      	strlt	r2, [sp, #16]
 80036c8:	7823      	ldrb	r3, [r4, #0]
 80036ca:	2b2e      	cmp	r3, #46	; 0x2e
 80036cc:	d10c      	bne.n	80036e8 <_svfiprintf_r+0x130>
 80036ce:	7863      	ldrb	r3, [r4, #1]
 80036d0:	2b2a      	cmp	r3, #42	; 0x2a
 80036d2:	d135      	bne.n	8003740 <_svfiprintf_r+0x188>
 80036d4:	9b03      	ldr	r3, [sp, #12]
 80036d6:	1d1a      	adds	r2, r3, #4
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	9203      	str	r2, [sp, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bfb8      	it	lt
 80036e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80036e4:	3402      	adds	r4, #2
 80036e6:	9305      	str	r3, [sp, #20]
 80036e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80037b4 <_svfiprintf_r+0x1fc>
 80036ec:	7821      	ldrb	r1, [r4, #0]
 80036ee:	2203      	movs	r2, #3
 80036f0:	4650      	mov	r0, sl
 80036f2:	f7fc fd7d 	bl	80001f0 <memchr>
 80036f6:	b140      	cbz	r0, 800370a <_svfiprintf_r+0x152>
 80036f8:	2340      	movs	r3, #64	; 0x40
 80036fa:	eba0 000a 	sub.w	r0, r0, sl
 80036fe:	fa03 f000 	lsl.w	r0, r3, r0
 8003702:	9b04      	ldr	r3, [sp, #16]
 8003704:	4303      	orrs	r3, r0
 8003706:	3401      	adds	r4, #1
 8003708:	9304      	str	r3, [sp, #16]
 800370a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800370e:	4826      	ldr	r0, [pc, #152]	; (80037a8 <_svfiprintf_r+0x1f0>)
 8003710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003714:	2206      	movs	r2, #6
 8003716:	f7fc fd6b 	bl	80001f0 <memchr>
 800371a:	2800      	cmp	r0, #0
 800371c:	d038      	beq.n	8003790 <_svfiprintf_r+0x1d8>
 800371e:	4b23      	ldr	r3, [pc, #140]	; (80037ac <_svfiprintf_r+0x1f4>)
 8003720:	bb1b      	cbnz	r3, 800376a <_svfiprintf_r+0x1b2>
 8003722:	9b03      	ldr	r3, [sp, #12]
 8003724:	3307      	adds	r3, #7
 8003726:	f023 0307 	bic.w	r3, r3, #7
 800372a:	3308      	adds	r3, #8
 800372c:	9303      	str	r3, [sp, #12]
 800372e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003730:	4433      	add	r3, r6
 8003732:	9309      	str	r3, [sp, #36]	; 0x24
 8003734:	e767      	b.n	8003606 <_svfiprintf_r+0x4e>
 8003736:	fb0c 3202 	mla	r2, ip, r2, r3
 800373a:	460c      	mov	r4, r1
 800373c:	2001      	movs	r0, #1
 800373e:	e7a5      	b.n	800368c <_svfiprintf_r+0xd4>
 8003740:	2300      	movs	r3, #0
 8003742:	3401      	adds	r4, #1
 8003744:	9305      	str	r3, [sp, #20]
 8003746:	4619      	mov	r1, r3
 8003748:	f04f 0c0a 	mov.w	ip, #10
 800374c:	4620      	mov	r0, r4
 800374e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003752:	3a30      	subs	r2, #48	; 0x30
 8003754:	2a09      	cmp	r2, #9
 8003756:	d903      	bls.n	8003760 <_svfiprintf_r+0x1a8>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0c5      	beq.n	80036e8 <_svfiprintf_r+0x130>
 800375c:	9105      	str	r1, [sp, #20]
 800375e:	e7c3      	b.n	80036e8 <_svfiprintf_r+0x130>
 8003760:	fb0c 2101 	mla	r1, ip, r1, r2
 8003764:	4604      	mov	r4, r0
 8003766:	2301      	movs	r3, #1
 8003768:	e7f0      	b.n	800374c <_svfiprintf_r+0x194>
 800376a:	ab03      	add	r3, sp, #12
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	462a      	mov	r2, r5
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <_svfiprintf_r+0x1f8>)
 8003772:	a904      	add	r1, sp, #16
 8003774:	4638      	mov	r0, r7
 8003776:	f3af 8000 	nop.w
 800377a:	1c42      	adds	r2, r0, #1
 800377c:	4606      	mov	r6, r0
 800377e:	d1d6      	bne.n	800372e <_svfiprintf_r+0x176>
 8003780:	89ab      	ldrh	r3, [r5, #12]
 8003782:	065b      	lsls	r3, r3, #25
 8003784:	f53f af2c 	bmi.w	80035e0 <_svfiprintf_r+0x28>
 8003788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800378a:	b01d      	add	sp, #116	; 0x74
 800378c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003790:	ab03      	add	r3, sp, #12
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	462a      	mov	r2, r5
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <_svfiprintf_r+0x1f8>)
 8003798:	a904      	add	r1, sp, #16
 800379a:	4638      	mov	r0, r7
 800379c:	f000 f87a 	bl	8003894 <_printf_i>
 80037a0:	e7eb      	b.n	800377a <_svfiprintf_r+0x1c2>
 80037a2:	bf00      	nop
 80037a4:	0800429c 	.word	0x0800429c
 80037a8:	080042a6 	.word	0x080042a6
 80037ac:	00000000 	.word	0x00000000
 80037b0:	08003501 	.word	0x08003501
 80037b4:	080042a2 	.word	0x080042a2

080037b8 <_printf_common>:
 80037b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037bc:	4616      	mov	r6, r2
 80037be:	4699      	mov	r9, r3
 80037c0:	688a      	ldr	r2, [r1, #8]
 80037c2:	690b      	ldr	r3, [r1, #16]
 80037c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037c8:	4293      	cmp	r3, r2
 80037ca:	bfb8      	it	lt
 80037cc:	4613      	movlt	r3, r2
 80037ce:	6033      	str	r3, [r6, #0]
 80037d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037d4:	4607      	mov	r7, r0
 80037d6:	460c      	mov	r4, r1
 80037d8:	b10a      	cbz	r2, 80037de <_printf_common+0x26>
 80037da:	3301      	adds	r3, #1
 80037dc:	6033      	str	r3, [r6, #0]
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	0699      	lsls	r1, r3, #26
 80037e2:	bf42      	ittt	mi
 80037e4:	6833      	ldrmi	r3, [r6, #0]
 80037e6:	3302      	addmi	r3, #2
 80037e8:	6033      	strmi	r3, [r6, #0]
 80037ea:	6825      	ldr	r5, [r4, #0]
 80037ec:	f015 0506 	ands.w	r5, r5, #6
 80037f0:	d106      	bne.n	8003800 <_printf_common+0x48>
 80037f2:	f104 0a19 	add.w	sl, r4, #25
 80037f6:	68e3      	ldr	r3, [r4, #12]
 80037f8:	6832      	ldr	r2, [r6, #0]
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	42ab      	cmp	r3, r5
 80037fe:	dc26      	bgt.n	800384e <_printf_common+0x96>
 8003800:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003804:	1e13      	subs	r3, r2, #0
 8003806:	6822      	ldr	r2, [r4, #0]
 8003808:	bf18      	it	ne
 800380a:	2301      	movne	r3, #1
 800380c:	0692      	lsls	r2, r2, #26
 800380e:	d42b      	bmi.n	8003868 <_printf_common+0xb0>
 8003810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003814:	4649      	mov	r1, r9
 8003816:	4638      	mov	r0, r7
 8003818:	47c0      	blx	r8
 800381a:	3001      	adds	r0, #1
 800381c:	d01e      	beq.n	800385c <_printf_common+0xa4>
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	68e5      	ldr	r5, [r4, #12]
 8003822:	6832      	ldr	r2, [r6, #0]
 8003824:	f003 0306 	and.w	r3, r3, #6
 8003828:	2b04      	cmp	r3, #4
 800382a:	bf08      	it	eq
 800382c:	1aad      	subeq	r5, r5, r2
 800382e:	68a3      	ldr	r3, [r4, #8]
 8003830:	6922      	ldr	r2, [r4, #16]
 8003832:	bf0c      	ite	eq
 8003834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003838:	2500      	movne	r5, #0
 800383a:	4293      	cmp	r3, r2
 800383c:	bfc4      	itt	gt
 800383e:	1a9b      	subgt	r3, r3, r2
 8003840:	18ed      	addgt	r5, r5, r3
 8003842:	2600      	movs	r6, #0
 8003844:	341a      	adds	r4, #26
 8003846:	42b5      	cmp	r5, r6
 8003848:	d11a      	bne.n	8003880 <_printf_common+0xc8>
 800384a:	2000      	movs	r0, #0
 800384c:	e008      	b.n	8003860 <_printf_common+0xa8>
 800384e:	2301      	movs	r3, #1
 8003850:	4652      	mov	r2, sl
 8003852:	4649      	mov	r1, r9
 8003854:	4638      	mov	r0, r7
 8003856:	47c0      	blx	r8
 8003858:	3001      	adds	r0, #1
 800385a:	d103      	bne.n	8003864 <_printf_common+0xac>
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003864:	3501      	adds	r5, #1
 8003866:	e7c6      	b.n	80037f6 <_printf_common+0x3e>
 8003868:	18e1      	adds	r1, r4, r3
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	2030      	movs	r0, #48	; 0x30
 800386e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003872:	4422      	add	r2, r4
 8003874:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003878:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800387c:	3302      	adds	r3, #2
 800387e:	e7c7      	b.n	8003810 <_printf_common+0x58>
 8003880:	2301      	movs	r3, #1
 8003882:	4622      	mov	r2, r4
 8003884:	4649      	mov	r1, r9
 8003886:	4638      	mov	r0, r7
 8003888:	47c0      	blx	r8
 800388a:	3001      	adds	r0, #1
 800388c:	d0e6      	beq.n	800385c <_printf_common+0xa4>
 800388e:	3601      	adds	r6, #1
 8003890:	e7d9      	b.n	8003846 <_printf_common+0x8e>
	...

08003894 <_printf_i>:
 8003894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003898:	7e0f      	ldrb	r7, [r1, #24]
 800389a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800389c:	2f78      	cmp	r7, #120	; 0x78
 800389e:	4691      	mov	r9, r2
 80038a0:	4680      	mov	r8, r0
 80038a2:	460c      	mov	r4, r1
 80038a4:	469a      	mov	sl, r3
 80038a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038aa:	d807      	bhi.n	80038bc <_printf_i+0x28>
 80038ac:	2f62      	cmp	r7, #98	; 0x62
 80038ae:	d80a      	bhi.n	80038c6 <_printf_i+0x32>
 80038b0:	2f00      	cmp	r7, #0
 80038b2:	f000 80d8 	beq.w	8003a66 <_printf_i+0x1d2>
 80038b6:	2f58      	cmp	r7, #88	; 0x58
 80038b8:	f000 80a3 	beq.w	8003a02 <_printf_i+0x16e>
 80038bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038c4:	e03a      	b.n	800393c <_printf_i+0xa8>
 80038c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038ca:	2b15      	cmp	r3, #21
 80038cc:	d8f6      	bhi.n	80038bc <_printf_i+0x28>
 80038ce:	a101      	add	r1, pc, #4	; (adr r1, 80038d4 <_printf_i+0x40>)
 80038d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038d4:	0800392d 	.word	0x0800392d
 80038d8:	08003941 	.word	0x08003941
 80038dc:	080038bd 	.word	0x080038bd
 80038e0:	080038bd 	.word	0x080038bd
 80038e4:	080038bd 	.word	0x080038bd
 80038e8:	080038bd 	.word	0x080038bd
 80038ec:	08003941 	.word	0x08003941
 80038f0:	080038bd 	.word	0x080038bd
 80038f4:	080038bd 	.word	0x080038bd
 80038f8:	080038bd 	.word	0x080038bd
 80038fc:	080038bd 	.word	0x080038bd
 8003900:	08003a4d 	.word	0x08003a4d
 8003904:	08003971 	.word	0x08003971
 8003908:	08003a2f 	.word	0x08003a2f
 800390c:	080038bd 	.word	0x080038bd
 8003910:	080038bd 	.word	0x080038bd
 8003914:	08003a6f 	.word	0x08003a6f
 8003918:	080038bd 	.word	0x080038bd
 800391c:	08003971 	.word	0x08003971
 8003920:	080038bd 	.word	0x080038bd
 8003924:	080038bd 	.word	0x080038bd
 8003928:	08003a37 	.word	0x08003a37
 800392c:	682b      	ldr	r3, [r5, #0]
 800392e:	1d1a      	adds	r2, r3, #4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	602a      	str	r2, [r5, #0]
 8003934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800393c:	2301      	movs	r3, #1
 800393e:	e0a3      	b.n	8003a88 <_printf_i+0x1f4>
 8003940:	6820      	ldr	r0, [r4, #0]
 8003942:	6829      	ldr	r1, [r5, #0]
 8003944:	0606      	lsls	r6, r0, #24
 8003946:	f101 0304 	add.w	r3, r1, #4
 800394a:	d50a      	bpl.n	8003962 <_printf_i+0xce>
 800394c:	680e      	ldr	r6, [r1, #0]
 800394e:	602b      	str	r3, [r5, #0]
 8003950:	2e00      	cmp	r6, #0
 8003952:	da03      	bge.n	800395c <_printf_i+0xc8>
 8003954:	232d      	movs	r3, #45	; 0x2d
 8003956:	4276      	negs	r6, r6
 8003958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800395c:	485e      	ldr	r0, [pc, #376]	; (8003ad8 <_printf_i+0x244>)
 800395e:	230a      	movs	r3, #10
 8003960:	e019      	b.n	8003996 <_printf_i+0x102>
 8003962:	680e      	ldr	r6, [r1, #0]
 8003964:	602b      	str	r3, [r5, #0]
 8003966:	f010 0f40 	tst.w	r0, #64	; 0x40
 800396a:	bf18      	it	ne
 800396c:	b236      	sxthne	r6, r6
 800396e:	e7ef      	b.n	8003950 <_printf_i+0xbc>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	6820      	ldr	r0, [r4, #0]
 8003974:	1d19      	adds	r1, r3, #4
 8003976:	6029      	str	r1, [r5, #0]
 8003978:	0601      	lsls	r1, r0, #24
 800397a:	d501      	bpl.n	8003980 <_printf_i+0xec>
 800397c:	681e      	ldr	r6, [r3, #0]
 800397e:	e002      	b.n	8003986 <_printf_i+0xf2>
 8003980:	0646      	lsls	r6, r0, #25
 8003982:	d5fb      	bpl.n	800397c <_printf_i+0xe8>
 8003984:	881e      	ldrh	r6, [r3, #0]
 8003986:	4854      	ldr	r0, [pc, #336]	; (8003ad8 <_printf_i+0x244>)
 8003988:	2f6f      	cmp	r7, #111	; 0x6f
 800398a:	bf0c      	ite	eq
 800398c:	2308      	moveq	r3, #8
 800398e:	230a      	movne	r3, #10
 8003990:	2100      	movs	r1, #0
 8003992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003996:	6865      	ldr	r5, [r4, #4]
 8003998:	60a5      	str	r5, [r4, #8]
 800399a:	2d00      	cmp	r5, #0
 800399c:	bfa2      	ittt	ge
 800399e:	6821      	ldrge	r1, [r4, #0]
 80039a0:	f021 0104 	bicge.w	r1, r1, #4
 80039a4:	6021      	strge	r1, [r4, #0]
 80039a6:	b90e      	cbnz	r6, 80039ac <_printf_i+0x118>
 80039a8:	2d00      	cmp	r5, #0
 80039aa:	d04d      	beq.n	8003a48 <_printf_i+0x1b4>
 80039ac:	4615      	mov	r5, r2
 80039ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80039b2:	fb03 6711 	mls	r7, r3, r1, r6
 80039b6:	5dc7      	ldrb	r7, [r0, r7]
 80039b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039bc:	4637      	mov	r7, r6
 80039be:	42bb      	cmp	r3, r7
 80039c0:	460e      	mov	r6, r1
 80039c2:	d9f4      	bls.n	80039ae <_printf_i+0x11a>
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d10b      	bne.n	80039e0 <_printf_i+0x14c>
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	07de      	lsls	r6, r3, #31
 80039cc:	d508      	bpl.n	80039e0 <_printf_i+0x14c>
 80039ce:	6923      	ldr	r3, [r4, #16]
 80039d0:	6861      	ldr	r1, [r4, #4]
 80039d2:	4299      	cmp	r1, r3
 80039d4:	bfde      	ittt	le
 80039d6:	2330      	movle	r3, #48	; 0x30
 80039d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039e0:	1b52      	subs	r2, r2, r5
 80039e2:	6122      	str	r2, [r4, #16]
 80039e4:	f8cd a000 	str.w	sl, [sp]
 80039e8:	464b      	mov	r3, r9
 80039ea:	aa03      	add	r2, sp, #12
 80039ec:	4621      	mov	r1, r4
 80039ee:	4640      	mov	r0, r8
 80039f0:	f7ff fee2 	bl	80037b8 <_printf_common>
 80039f4:	3001      	adds	r0, #1
 80039f6:	d14c      	bne.n	8003a92 <_printf_i+0x1fe>
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	b004      	add	sp, #16
 80039fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a02:	4835      	ldr	r0, [pc, #212]	; (8003ad8 <_printf_i+0x244>)
 8003a04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a08:	6829      	ldr	r1, [r5, #0]
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a10:	6029      	str	r1, [r5, #0]
 8003a12:	061d      	lsls	r5, r3, #24
 8003a14:	d514      	bpl.n	8003a40 <_printf_i+0x1ac>
 8003a16:	07df      	lsls	r7, r3, #31
 8003a18:	bf44      	itt	mi
 8003a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8003a1e:	6023      	strmi	r3, [r4, #0]
 8003a20:	b91e      	cbnz	r6, 8003a2a <_printf_i+0x196>
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	f023 0320 	bic.w	r3, r3, #32
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	2310      	movs	r3, #16
 8003a2c:	e7b0      	b.n	8003990 <_printf_i+0xfc>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	f043 0320 	orr.w	r3, r3, #32
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	2378      	movs	r3, #120	; 0x78
 8003a38:	4828      	ldr	r0, [pc, #160]	; (8003adc <_printf_i+0x248>)
 8003a3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a3e:	e7e3      	b.n	8003a08 <_printf_i+0x174>
 8003a40:	0659      	lsls	r1, r3, #25
 8003a42:	bf48      	it	mi
 8003a44:	b2b6      	uxthmi	r6, r6
 8003a46:	e7e6      	b.n	8003a16 <_printf_i+0x182>
 8003a48:	4615      	mov	r5, r2
 8003a4a:	e7bb      	b.n	80039c4 <_printf_i+0x130>
 8003a4c:	682b      	ldr	r3, [r5, #0]
 8003a4e:	6826      	ldr	r6, [r4, #0]
 8003a50:	6961      	ldr	r1, [r4, #20]
 8003a52:	1d18      	adds	r0, r3, #4
 8003a54:	6028      	str	r0, [r5, #0]
 8003a56:	0635      	lsls	r5, r6, #24
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	d501      	bpl.n	8003a60 <_printf_i+0x1cc>
 8003a5c:	6019      	str	r1, [r3, #0]
 8003a5e:	e002      	b.n	8003a66 <_printf_i+0x1d2>
 8003a60:	0670      	lsls	r0, r6, #25
 8003a62:	d5fb      	bpl.n	8003a5c <_printf_i+0x1c8>
 8003a64:	8019      	strh	r1, [r3, #0]
 8003a66:	2300      	movs	r3, #0
 8003a68:	6123      	str	r3, [r4, #16]
 8003a6a:	4615      	mov	r5, r2
 8003a6c:	e7ba      	b.n	80039e4 <_printf_i+0x150>
 8003a6e:	682b      	ldr	r3, [r5, #0]
 8003a70:	1d1a      	adds	r2, r3, #4
 8003a72:	602a      	str	r2, [r5, #0]
 8003a74:	681d      	ldr	r5, [r3, #0]
 8003a76:	6862      	ldr	r2, [r4, #4]
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f7fc fbb8 	bl	80001f0 <memchr>
 8003a80:	b108      	cbz	r0, 8003a86 <_printf_i+0x1f2>
 8003a82:	1b40      	subs	r0, r0, r5
 8003a84:	6060      	str	r0, [r4, #4]
 8003a86:	6863      	ldr	r3, [r4, #4]
 8003a88:	6123      	str	r3, [r4, #16]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a90:	e7a8      	b.n	80039e4 <_printf_i+0x150>
 8003a92:	6923      	ldr	r3, [r4, #16]
 8003a94:	462a      	mov	r2, r5
 8003a96:	4649      	mov	r1, r9
 8003a98:	4640      	mov	r0, r8
 8003a9a:	47d0      	blx	sl
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d0ab      	beq.n	80039f8 <_printf_i+0x164>
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	079b      	lsls	r3, r3, #30
 8003aa4:	d413      	bmi.n	8003ace <_printf_i+0x23a>
 8003aa6:	68e0      	ldr	r0, [r4, #12]
 8003aa8:	9b03      	ldr	r3, [sp, #12]
 8003aaa:	4298      	cmp	r0, r3
 8003aac:	bfb8      	it	lt
 8003aae:	4618      	movlt	r0, r3
 8003ab0:	e7a4      	b.n	80039fc <_printf_i+0x168>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	4632      	mov	r2, r6
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	4640      	mov	r0, r8
 8003aba:	47d0      	blx	sl
 8003abc:	3001      	adds	r0, #1
 8003abe:	d09b      	beq.n	80039f8 <_printf_i+0x164>
 8003ac0:	3501      	adds	r5, #1
 8003ac2:	68e3      	ldr	r3, [r4, #12]
 8003ac4:	9903      	ldr	r1, [sp, #12]
 8003ac6:	1a5b      	subs	r3, r3, r1
 8003ac8:	42ab      	cmp	r3, r5
 8003aca:	dcf2      	bgt.n	8003ab2 <_printf_i+0x21e>
 8003acc:	e7eb      	b.n	8003aa6 <_printf_i+0x212>
 8003ace:	2500      	movs	r5, #0
 8003ad0:	f104 0619 	add.w	r6, r4, #25
 8003ad4:	e7f5      	b.n	8003ac2 <_printf_i+0x22e>
 8003ad6:	bf00      	nop
 8003ad8:	080042ad 	.word	0x080042ad
 8003adc:	080042be 	.word	0x080042be

08003ae0 <memcpy>:
 8003ae0:	440a      	add	r2, r1
 8003ae2:	4291      	cmp	r1, r2
 8003ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ae8:	d100      	bne.n	8003aec <memcpy+0xc>
 8003aea:	4770      	bx	lr
 8003aec:	b510      	push	{r4, lr}
 8003aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003af6:	4291      	cmp	r1, r2
 8003af8:	d1f9      	bne.n	8003aee <memcpy+0xe>
 8003afa:	bd10      	pop	{r4, pc}

08003afc <memmove>:
 8003afc:	4288      	cmp	r0, r1
 8003afe:	b510      	push	{r4, lr}
 8003b00:	eb01 0402 	add.w	r4, r1, r2
 8003b04:	d902      	bls.n	8003b0c <memmove+0x10>
 8003b06:	4284      	cmp	r4, r0
 8003b08:	4623      	mov	r3, r4
 8003b0a:	d807      	bhi.n	8003b1c <memmove+0x20>
 8003b0c:	1e43      	subs	r3, r0, #1
 8003b0e:	42a1      	cmp	r1, r4
 8003b10:	d008      	beq.n	8003b24 <memmove+0x28>
 8003b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b1a:	e7f8      	b.n	8003b0e <memmove+0x12>
 8003b1c:	4402      	add	r2, r0
 8003b1e:	4601      	mov	r1, r0
 8003b20:	428a      	cmp	r2, r1
 8003b22:	d100      	bne.n	8003b26 <memmove+0x2a>
 8003b24:	bd10      	pop	{r4, pc}
 8003b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b2e:	e7f7      	b.n	8003b20 <memmove+0x24>

08003b30 <_free_r>:
 8003b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b32:	2900      	cmp	r1, #0
 8003b34:	d044      	beq.n	8003bc0 <_free_r+0x90>
 8003b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b3a:	9001      	str	r0, [sp, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f1a1 0404 	sub.w	r4, r1, #4
 8003b42:	bfb8      	it	lt
 8003b44:	18e4      	addlt	r4, r4, r3
 8003b46:	f000 f913 	bl	8003d70 <__malloc_lock>
 8003b4a:	4a1e      	ldr	r2, [pc, #120]	; (8003bc4 <_free_r+0x94>)
 8003b4c:	9801      	ldr	r0, [sp, #4]
 8003b4e:	6813      	ldr	r3, [r2, #0]
 8003b50:	b933      	cbnz	r3, 8003b60 <_free_r+0x30>
 8003b52:	6063      	str	r3, [r4, #4]
 8003b54:	6014      	str	r4, [r2, #0]
 8003b56:	b003      	add	sp, #12
 8003b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b5c:	f000 b90e 	b.w	8003d7c <__malloc_unlock>
 8003b60:	42a3      	cmp	r3, r4
 8003b62:	d908      	bls.n	8003b76 <_free_r+0x46>
 8003b64:	6825      	ldr	r5, [r4, #0]
 8003b66:	1961      	adds	r1, r4, r5
 8003b68:	428b      	cmp	r3, r1
 8003b6a:	bf01      	itttt	eq
 8003b6c:	6819      	ldreq	r1, [r3, #0]
 8003b6e:	685b      	ldreq	r3, [r3, #4]
 8003b70:	1949      	addeq	r1, r1, r5
 8003b72:	6021      	streq	r1, [r4, #0]
 8003b74:	e7ed      	b.n	8003b52 <_free_r+0x22>
 8003b76:	461a      	mov	r2, r3
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	b10b      	cbz	r3, 8003b80 <_free_r+0x50>
 8003b7c:	42a3      	cmp	r3, r4
 8003b7e:	d9fa      	bls.n	8003b76 <_free_r+0x46>
 8003b80:	6811      	ldr	r1, [r2, #0]
 8003b82:	1855      	adds	r5, r2, r1
 8003b84:	42a5      	cmp	r5, r4
 8003b86:	d10b      	bne.n	8003ba0 <_free_r+0x70>
 8003b88:	6824      	ldr	r4, [r4, #0]
 8003b8a:	4421      	add	r1, r4
 8003b8c:	1854      	adds	r4, r2, r1
 8003b8e:	42a3      	cmp	r3, r4
 8003b90:	6011      	str	r1, [r2, #0]
 8003b92:	d1e0      	bne.n	8003b56 <_free_r+0x26>
 8003b94:	681c      	ldr	r4, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	6053      	str	r3, [r2, #4]
 8003b9a:	4421      	add	r1, r4
 8003b9c:	6011      	str	r1, [r2, #0]
 8003b9e:	e7da      	b.n	8003b56 <_free_r+0x26>
 8003ba0:	d902      	bls.n	8003ba8 <_free_r+0x78>
 8003ba2:	230c      	movs	r3, #12
 8003ba4:	6003      	str	r3, [r0, #0]
 8003ba6:	e7d6      	b.n	8003b56 <_free_r+0x26>
 8003ba8:	6825      	ldr	r5, [r4, #0]
 8003baa:	1961      	adds	r1, r4, r5
 8003bac:	428b      	cmp	r3, r1
 8003bae:	bf04      	itt	eq
 8003bb0:	6819      	ldreq	r1, [r3, #0]
 8003bb2:	685b      	ldreq	r3, [r3, #4]
 8003bb4:	6063      	str	r3, [r4, #4]
 8003bb6:	bf04      	itt	eq
 8003bb8:	1949      	addeq	r1, r1, r5
 8003bba:	6021      	streq	r1, [r4, #0]
 8003bbc:	6054      	str	r4, [r2, #4]
 8003bbe:	e7ca      	b.n	8003b56 <_free_r+0x26>
 8003bc0:	b003      	add	sp, #12
 8003bc2:	bd30      	pop	{r4, r5, pc}
 8003bc4:	20000474 	.word	0x20000474

08003bc8 <sbrk_aligned>:
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	4e0e      	ldr	r6, [pc, #56]	; (8003c04 <sbrk_aligned+0x3c>)
 8003bcc:	460c      	mov	r4, r1
 8003bce:	6831      	ldr	r1, [r6, #0]
 8003bd0:	4605      	mov	r5, r0
 8003bd2:	b911      	cbnz	r1, 8003bda <sbrk_aligned+0x12>
 8003bd4:	f000 f8bc 	bl	8003d50 <_sbrk_r>
 8003bd8:	6030      	str	r0, [r6, #0]
 8003bda:	4621      	mov	r1, r4
 8003bdc:	4628      	mov	r0, r5
 8003bde:	f000 f8b7 	bl	8003d50 <_sbrk_r>
 8003be2:	1c43      	adds	r3, r0, #1
 8003be4:	d00a      	beq.n	8003bfc <sbrk_aligned+0x34>
 8003be6:	1cc4      	adds	r4, r0, #3
 8003be8:	f024 0403 	bic.w	r4, r4, #3
 8003bec:	42a0      	cmp	r0, r4
 8003bee:	d007      	beq.n	8003c00 <sbrk_aligned+0x38>
 8003bf0:	1a21      	subs	r1, r4, r0
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	f000 f8ac 	bl	8003d50 <_sbrk_r>
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	d101      	bne.n	8003c00 <sbrk_aligned+0x38>
 8003bfc:	f04f 34ff 	mov.w	r4, #4294967295
 8003c00:	4620      	mov	r0, r4
 8003c02:	bd70      	pop	{r4, r5, r6, pc}
 8003c04:	20000478 	.word	0x20000478

08003c08 <_malloc_r>:
 8003c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c0c:	1ccd      	adds	r5, r1, #3
 8003c0e:	f025 0503 	bic.w	r5, r5, #3
 8003c12:	3508      	adds	r5, #8
 8003c14:	2d0c      	cmp	r5, #12
 8003c16:	bf38      	it	cc
 8003c18:	250c      	movcc	r5, #12
 8003c1a:	2d00      	cmp	r5, #0
 8003c1c:	4607      	mov	r7, r0
 8003c1e:	db01      	blt.n	8003c24 <_malloc_r+0x1c>
 8003c20:	42a9      	cmp	r1, r5
 8003c22:	d905      	bls.n	8003c30 <_malloc_r+0x28>
 8003c24:	230c      	movs	r3, #12
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	2600      	movs	r6, #0
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c30:	4e2e      	ldr	r6, [pc, #184]	; (8003cec <_malloc_r+0xe4>)
 8003c32:	f000 f89d 	bl	8003d70 <__malloc_lock>
 8003c36:	6833      	ldr	r3, [r6, #0]
 8003c38:	461c      	mov	r4, r3
 8003c3a:	bb34      	cbnz	r4, 8003c8a <_malloc_r+0x82>
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	4638      	mov	r0, r7
 8003c40:	f7ff ffc2 	bl	8003bc8 <sbrk_aligned>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	4604      	mov	r4, r0
 8003c48:	d14d      	bne.n	8003ce6 <_malloc_r+0xde>
 8003c4a:	6834      	ldr	r4, [r6, #0]
 8003c4c:	4626      	mov	r6, r4
 8003c4e:	2e00      	cmp	r6, #0
 8003c50:	d140      	bne.n	8003cd4 <_malloc_r+0xcc>
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	4631      	mov	r1, r6
 8003c56:	4638      	mov	r0, r7
 8003c58:	eb04 0803 	add.w	r8, r4, r3
 8003c5c:	f000 f878 	bl	8003d50 <_sbrk_r>
 8003c60:	4580      	cmp	r8, r0
 8003c62:	d13a      	bne.n	8003cda <_malloc_r+0xd2>
 8003c64:	6821      	ldr	r1, [r4, #0]
 8003c66:	3503      	adds	r5, #3
 8003c68:	1a6d      	subs	r5, r5, r1
 8003c6a:	f025 0503 	bic.w	r5, r5, #3
 8003c6e:	3508      	adds	r5, #8
 8003c70:	2d0c      	cmp	r5, #12
 8003c72:	bf38      	it	cc
 8003c74:	250c      	movcc	r5, #12
 8003c76:	4629      	mov	r1, r5
 8003c78:	4638      	mov	r0, r7
 8003c7a:	f7ff ffa5 	bl	8003bc8 <sbrk_aligned>
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d02b      	beq.n	8003cda <_malloc_r+0xd2>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	442b      	add	r3, r5
 8003c86:	6023      	str	r3, [r4, #0]
 8003c88:	e00e      	b.n	8003ca8 <_malloc_r+0xa0>
 8003c8a:	6822      	ldr	r2, [r4, #0]
 8003c8c:	1b52      	subs	r2, r2, r5
 8003c8e:	d41e      	bmi.n	8003cce <_malloc_r+0xc6>
 8003c90:	2a0b      	cmp	r2, #11
 8003c92:	d916      	bls.n	8003cc2 <_malloc_r+0xba>
 8003c94:	1961      	adds	r1, r4, r5
 8003c96:	42a3      	cmp	r3, r4
 8003c98:	6025      	str	r5, [r4, #0]
 8003c9a:	bf18      	it	ne
 8003c9c:	6059      	strne	r1, [r3, #4]
 8003c9e:	6863      	ldr	r3, [r4, #4]
 8003ca0:	bf08      	it	eq
 8003ca2:	6031      	streq	r1, [r6, #0]
 8003ca4:	5162      	str	r2, [r4, r5]
 8003ca6:	604b      	str	r3, [r1, #4]
 8003ca8:	4638      	mov	r0, r7
 8003caa:	f104 060b 	add.w	r6, r4, #11
 8003cae:	f000 f865 	bl	8003d7c <__malloc_unlock>
 8003cb2:	f026 0607 	bic.w	r6, r6, #7
 8003cb6:	1d23      	adds	r3, r4, #4
 8003cb8:	1af2      	subs	r2, r6, r3
 8003cba:	d0b6      	beq.n	8003c2a <_malloc_r+0x22>
 8003cbc:	1b9b      	subs	r3, r3, r6
 8003cbe:	50a3      	str	r3, [r4, r2]
 8003cc0:	e7b3      	b.n	8003c2a <_malloc_r+0x22>
 8003cc2:	6862      	ldr	r2, [r4, #4]
 8003cc4:	42a3      	cmp	r3, r4
 8003cc6:	bf0c      	ite	eq
 8003cc8:	6032      	streq	r2, [r6, #0]
 8003cca:	605a      	strne	r2, [r3, #4]
 8003ccc:	e7ec      	b.n	8003ca8 <_malloc_r+0xa0>
 8003cce:	4623      	mov	r3, r4
 8003cd0:	6864      	ldr	r4, [r4, #4]
 8003cd2:	e7b2      	b.n	8003c3a <_malloc_r+0x32>
 8003cd4:	4634      	mov	r4, r6
 8003cd6:	6876      	ldr	r6, [r6, #4]
 8003cd8:	e7b9      	b.n	8003c4e <_malloc_r+0x46>
 8003cda:	230c      	movs	r3, #12
 8003cdc:	603b      	str	r3, [r7, #0]
 8003cde:	4638      	mov	r0, r7
 8003ce0:	f000 f84c 	bl	8003d7c <__malloc_unlock>
 8003ce4:	e7a1      	b.n	8003c2a <_malloc_r+0x22>
 8003ce6:	6025      	str	r5, [r4, #0]
 8003ce8:	e7de      	b.n	8003ca8 <_malloc_r+0xa0>
 8003cea:	bf00      	nop
 8003cec:	20000474 	.word	0x20000474

08003cf0 <_realloc_r>:
 8003cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf4:	4680      	mov	r8, r0
 8003cf6:	4614      	mov	r4, r2
 8003cf8:	460e      	mov	r6, r1
 8003cfa:	b921      	cbnz	r1, 8003d06 <_realloc_r+0x16>
 8003cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d00:	4611      	mov	r1, r2
 8003d02:	f7ff bf81 	b.w	8003c08 <_malloc_r>
 8003d06:	b92a      	cbnz	r2, 8003d14 <_realloc_r+0x24>
 8003d08:	f7ff ff12 	bl	8003b30 <_free_r>
 8003d0c:	4625      	mov	r5, r4
 8003d0e:	4628      	mov	r0, r5
 8003d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d14:	f000 f838 	bl	8003d88 <_malloc_usable_size_r>
 8003d18:	4284      	cmp	r4, r0
 8003d1a:	4607      	mov	r7, r0
 8003d1c:	d802      	bhi.n	8003d24 <_realloc_r+0x34>
 8003d1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d22:	d812      	bhi.n	8003d4a <_realloc_r+0x5a>
 8003d24:	4621      	mov	r1, r4
 8003d26:	4640      	mov	r0, r8
 8003d28:	f7ff ff6e 	bl	8003c08 <_malloc_r>
 8003d2c:	4605      	mov	r5, r0
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d0ed      	beq.n	8003d0e <_realloc_r+0x1e>
 8003d32:	42bc      	cmp	r4, r7
 8003d34:	4622      	mov	r2, r4
 8003d36:	4631      	mov	r1, r6
 8003d38:	bf28      	it	cs
 8003d3a:	463a      	movcs	r2, r7
 8003d3c:	f7ff fed0 	bl	8003ae0 <memcpy>
 8003d40:	4631      	mov	r1, r6
 8003d42:	4640      	mov	r0, r8
 8003d44:	f7ff fef4 	bl	8003b30 <_free_r>
 8003d48:	e7e1      	b.n	8003d0e <_realloc_r+0x1e>
 8003d4a:	4635      	mov	r5, r6
 8003d4c:	e7df      	b.n	8003d0e <_realloc_r+0x1e>
	...

08003d50 <_sbrk_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	4d06      	ldr	r5, [pc, #24]	; (8003d6c <_sbrk_r+0x1c>)
 8003d54:	2300      	movs	r3, #0
 8003d56:	4604      	mov	r4, r0
 8003d58:	4608      	mov	r0, r1
 8003d5a:	602b      	str	r3, [r5, #0]
 8003d5c:	f7fd f972 	bl	8001044 <_sbrk>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d102      	bne.n	8003d6a <_sbrk_r+0x1a>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	b103      	cbz	r3, 8003d6a <_sbrk_r+0x1a>
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	2000047c 	.word	0x2000047c

08003d70 <__malloc_lock>:
 8003d70:	4801      	ldr	r0, [pc, #4]	; (8003d78 <__malloc_lock+0x8>)
 8003d72:	f000 b811 	b.w	8003d98 <__retarget_lock_acquire_recursive>
 8003d76:	bf00      	nop
 8003d78:	20000480 	.word	0x20000480

08003d7c <__malloc_unlock>:
 8003d7c:	4801      	ldr	r0, [pc, #4]	; (8003d84 <__malloc_unlock+0x8>)
 8003d7e:	f000 b80c 	b.w	8003d9a <__retarget_lock_release_recursive>
 8003d82:	bf00      	nop
 8003d84:	20000480 	.word	0x20000480

08003d88 <_malloc_usable_size_r>:
 8003d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d8c:	1f18      	subs	r0, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bfbc      	itt	lt
 8003d92:	580b      	ldrlt	r3, [r1, r0]
 8003d94:	18c0      	addlt	r0, r0, r3
 8003d96:	4770      	bx	lr

08003d98 <__retarget_lock_acquire_recursive>:
 8003d98:	4770      	bx	lr

08003d9a <__retarget_lock_release_recursive>:
 8003d9a:	4770      	bx	lr

08003d9c <_init>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	bf00      	nop
 8003da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da2:	bc08      	pop	{r3}
 8003da4:	469e      	mov	lr, r3
 8003da6:	4770      	bx	lr

08003da8 <_fini>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	bf00      	nop
 8003dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dae:	bc08      	pop	{r3}
 8003db0:	469e      	mov	lr, r3
 8003db2:	4770      	bx	lr
